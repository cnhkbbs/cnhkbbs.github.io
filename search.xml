<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【置顶】 私有云不再对外开放</title>
      <link href="/2024/06/24/%E3%80%90%E7%BD%AE%E9%A1%B6%E3%80%91/"/>
      <url>/2024/06/24/%E3%80%90%E7%BD%AE%E9%A1%B6%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h1 id="私有云不再对外开放"><a href="#私有云不再对外开放" class="headerlink" title="私有云不再对外开放"></a>私有云不再对外开放</h1><p>出于安全考虑，私有云(pan.no51.top)不再对外开放，如需访问请连接虚拟局域网。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PySide6】PySide6 小部件</title>
      <link href="/2024/04/21/%E3%80%90PySide6%E3%80%91PySide6%20%E5%B0%8F%E9%83%A8%E4%BB%B6/"/>
      <url>/2024/04/21/%E3%80%90PySide6%E3%80%91PySide6%20%E5%B0%8F%E9%83%A8%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<div id="title-style">    <h1>【PySide6】PySide6 小部件</h1>    <p>使用QPushButton, QCheckBox, QComboBox, QLabel, 和 QSlider 小部件</p></div><p>在Qt(和大多数用户界面)中，<strong>widget</strong>是用户可以与之交互的UI组件的名称。用户界面由多个小部件组成，排列在窗口内。</p><p>Qt提供了大量可用的小部件，甚至允许您创建自己的自定义和自定义小部件。</p><h1 id="快速演示-PySide6-Widgets"><a href="#快速演示-PySide6-Widgets" class="headerlink" title="快速演示:PySide6 Widgets"></a>快速演示:PySide6 Widgets</h1><p>首先，让我们来看一些最常见的 PySide 控件。以下代码创建了一系列 PySide 控件，并将它们添加到窗口布局中，以便你能一起看到它们： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> (</span><br><span class="line">    QApplication,</span><br><span class="line">    QCheckBox,</span><br><span class="line">    QComboBox,</span><br><span class="line">    QDateEdit,</span><br><span class="line">    QDateTimeEdit,</span><br><span class="line">    QDial,</span><br><span class="line">    QDoubleSpinBox,</span><br><span class="line">    QFontComboBox,</span><br><span class="line">    QLabel,</span><br><span class="line">    QLCDNumber,</span><br><span class="line">    QLineEdit,</span><br><span class="line">    QMainWindow,</span><br><span class="line">    QProgressBar,</span><br><span class="line">    QPushButton,</span><br><span class="line">    QRadioButton,</span><br><span class="line">    QSlider,</span><br><span class="line">    QSpinBox,</span><br><span class="line">    QTimeEdit,</span><br><span class="line">    QVBoxLayout,</span><br><span class="line">    QWidget,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;Widgets App&quot;</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        widgets = [</span><br><span class="line">            QCheckBox,</span><br><span class="line">            QComboBox,</span><br><span class="line">            QDateEdit,</span><br><span class="line">            QDateTimeEdit,</span><br><span class="line">            QDial,</span><br><span class="line">            QDoubleSpinBox,</span><br><span class="line">            QFontComboBox,</span><br><span class="line">            QLCDNumber,</span><br><span class="line">            QLabel,</span><br><span class="line">            QLineEdit,</span><br><span class="line">            QProgressBar,</span><br><span class="line">            QPushButton,</span><br><span class="line">            QRadioButton,</span><br><span class="line">            QSlider,</span><br><span class="line">            QSpinBox,</span><br><span class="line">            QTimeEdit,</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> widget <span class="keyword">in</span> widgets:</span><br><span class="line">            layout.addWidget(widget())</span><br><span class="line"></span><br><span class="line">        central_widget = QWidget()</span><br><span class="line">        central_widget.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(central_widget)</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line">window = MainWindow()</span><br><span class="line">window.show()</span><br><span class="line">app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><p class="admonition admonition-run"><span class="admonition-kind"><i class="fas fa-rocket"></i></span> <em>运行这段代码!</em> 你将看到一个窗口出现，其中包含我们创建的所有小部件。</p><p><img src="https://cdnjson.com/images/2024/08/07/widgets-list.webp" alt="widgets-list.webp"></p><p>让我们从上到下看一下所有的示例小部件:</p><table><thead><tr><th>Widget</th><th>功能描述</th></tr></thead><tbody><tr><td><code>QCheckbox</code></td><td>一个复选框</td></tr><tr><td><code>QComboBox</code></td><td>下拉列表框</td></tr><tr><td><code>QDateEdit</code></td><td>用于编辑日期和时间</td></tr><tr><td><code>QDateTimeEdit</code></td><td>用于编辑日期和时间</td></tr><tr><td><code>QDial</code></td><td>可旋转的刻度盘</td></tr><tr><td><code>QDoubleSpinBox</code></td><td>用于浮点数的选择器</td></tr><tr><td><code>QFontComboBox</code></td><td>字体列表</td></tr><tr><td><code>QLCDNumber</code></td><td>一个不太美观的 LCD 显示</td></tr><tr><td><code>QLabel</code></td><td>仅是一个标签，非交互式</td></tr><tr><td><code>QLineEdit</code></td><td>输入一行文本</td></tr><tr><td><code>QProgressBar</code></td><td>进度条</td></tr><tr><td><code>QPushButton</code></td><td>按钮</td></tr><tr><td><code>QRadioButton</code></td><td>单选按钮组，仅一项可选</td></tr><tr><td><code>QSlider</code></td><td>滑动条</td></tr><tr><td><code>QSpinBox</code></td><td>整数选择器</td></tr><tr><td><code>QTimeEdit</code></td><td>用于编辑时间</td></tr></tbody></table><p>还有更多的小部件，但它们不太适合!您可以通过检查Qt文档来查看它们。</p><p>接下来，我们将逐步了解一些最常用的小部件，并更详细地研究它们。为了试验这些小部件，我们需要一个简单的应用程序来放置它们。将下面的代码保存到一个名为<code>app.py</code>的文件中，并运行它以确保它正常工作:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PySide6.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> (</span><br><span class="line">    QApplication,</span><br><span class="line">    QCheckBox,</span><br><span class="line">    QComboBox,</span><br><span class="line">    QDial,</span><br><span class="line">    QDoubleSpinBox,</span><br><span class="line">    QLabel,</span><br><span class="line">    QLineEdit,</span><br><span class="line">    QListWidget,</span><br><span class="line">    QMainWindow,</span><br><span class="line">    QSlider,</span><br><span class="line">    QSpinBox,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MainWindow, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;My App&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line">window = MainWindow()</span><br><span class="line">window.show()</span><br><span class="line">app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们导入了许多Qt小部件。现在，我们将依次遍历这些小部件，将它们添加到我们的应用程序中，并查看它们的行为。</p><h2 id="QLabel"><a href="#QLabel" class="headerlink" title="QLabel"></a>QLabel</h2><p>我们将从<code>QLabel</code>开始，它可以说是Qt工具箱中最简单的部件之一。这是一个简单的单行文本，您可以在应用程序中定位它。你可以在创建文本时通过传入一个<code>str</code>来设置文本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label = QLabel(<span class="string">&quot;Hello&quot;</span>)</span><br></pre></td></tr></table></figure><p>或是使用 .setText() 函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">label_1 = QLabel(<span class="string">&quot;1&quot;</span>)  <span class="comment"># 标签创建时的内容是数字 1.</span></span><br><span class="line">label_2.setText(<span class="string">&quot;2&quot;</span>)   <span class="comment"># 标签现在显示的内容是数字 2.</span></span><br></pre></td></tr></table></figure><p>您还可以调整字体参数，例如字体大小或小部件中文本的对齐方式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MainWindow, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;My App&quot;</span>)</span><br><span class="line"></span><br><span class="line">        label = QLabel(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">        font = label.font()</span><br><span class="line">        font.setPointSize(<span class="number">30</span>)</span><br><span class="line">        label.setFont(font)</span><br><span class="line">        label.setAlignment(</span><br><span class="line">            Qt.AlignmentFlag.AlignHCenter | Qt.AlignmentFlag.AlignVCenter</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(label)</span><br></pre></td></tr></table></figure><p><img src="https://cdnjson.com/images/2024/08/07/widgets1.webp" alt="widgets1.webp"></p><p class="admonition admonition-tip"><span class="admonition-kind"><i class="fas fa-lightbulb"></i></span> <b>提示</b>:请注意，如果您想要更改小部件字体的属性，通常最好是获取当前字体，更新它，然后再应用它。这确保了字体面与桌面惯例保持一致。</p><p class="admonition admonition-tip"><span class="admonition-kind"><i class="fas fa-lightbulb"></i></span>    <b>原文信息：《PySide6 Widgets》</b><br />    <b>原作者：Martin Fitzpatrick</b><br />    <b>出处：<a href="https://www.pythonguis.com/tutorials/pyside6-widgets/" target="blank">https://www.pythonguis.com/tutorials/pyside6-widgets/</a></b><br />    <b>免责声明：本翻译内容仅代表翻译者的个人观点与理解，原作者对此翻译版本并未进行认可，翻译过程中可能存在误差，读者应自行核实原文内容。</b></p><style>.admonition a {    color: #EB5160;    text-decoration: none;}.admonition {    position: relative;    padding: 1rem 3rem 1rem 1rem;    background-color: #E9EBEF;    position: relative;    line-height: 1.8em;    border-radius: 5px;    border: 1px solid #D4D6DA;    margin: 2rem 0;}.admonition-kind {    opacity: 0.2;    position: absolute;    top: 0.25rem;    right: 0.25rem;    font-size: 1.5rem;}.admonition-body {    margin-right: 2rem;}p.admonition {    font-size: 1rem;    margin: 0.5rem 0;    font-family: 'Montserrat', 'Verdana', 'Geneva', 'Tahoma', sans-serif;}.admonition-note {    background-color: #FFFAED;    color: #b18f12;    border-color: #b18f12;}.admonition-tip {    background-color: #ECF1F6;    color: #376F9F;    border-color: #376F9F;}.admonition-warning {    background-color: #FBE9E7;    color: #FE4A49;    border-color: #FE4A49;}.admonition-ok {    background-color: #EEF7EF;    color: #4CAF50;    border-color: #4CAF50;}.admonition-challenge {    color: #3F51B5;}article img {    display: block;    float: none;    clear: both;    max-width: 80%;    height: auto;    margin: 3rem auto;}article img+em {    font-family: 'Poppins', 'Century Gothic', 'AppleGothic', sans-serif;    display: block;    width: 80%;    font-style: normal;    font-size: 0.8rem;    margin: -2.5rem auto 3rem auto;    text-align: center;    color: #888;}#title-style{        margin: 0 auto;        text-align: center;    }p{    -webkit-text-size-adjust: 100%;    color: #111;    letter-spacing: normal;    word-spacing: normal;    text-rendering: auto;    font-size: 1rem;    line-height: 1.8;    font-weight: 400;}</style>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PySide6】Pyside6 信号、插槽和事件</title>
      <link href="/2024/02/29/%E3%80%90PySide6%E3%80%91Pyside6%20%E4%BF%A1%E5%8F%B7%E3%80%81%E6%8F%92%E6%A7%BD%E5%92%8C%E4%BA%8B%E4%BB%B6/"/>
      <url>/2024/02/29/%E3%80%90PySide6%E3%80%91Pyside6%20%E4%BF%A1%E5%8F%B7%E3%80%81%E6%8F%92%E6%A7%BD%E5%92%8C%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<div id="title-style">    <h1>【PySide6】Pyside6 信号、插槽和事件</h1>    <p>用户行为和GUI事件的触发响应动作</p></div><p><a>此教程对PyQt6，PySide2和PyQt5同样适用</a></p><p>目前，我们已经创建了一个窗口，并在它上面添加了一个普通的按钮组件，但是这个按钮现在没有任何作用。这个窗口现在不是很有用–当你创建GUI应用程序，你通常想使用他们做某事！我们需要一个可以使当按钮被按下时可以使某些事情发生的方法。在Qt,这种方法由信号、插槽和事件提供。</p><h1 id="信号-插槽"><a href="#信号-插槽" class="headerlink" title="信号&amp;插槽"></a>信号&amp;插槽</h1><p>当某事发生时，信号是由部件发出的信息。“某事”可以是：按钮被按下、输入框的文字被编辑和窗口文字的改变等等。许多信号由用户动作发起，但这不是固定的规则。</p><p>除了通知正在发生的事情外，信号还可以发送数据以提供有关所发生事件的其他上下文。</p><p class="admonition admonition-tip"><span class="admonition-kind"><i class="fas fa-lightbulb"></i></span> 你还可以创建自己的自定义信号，我们将在稍后探讨</p><p>插槽是Qt用来接收信号的名词。在Python中，你的应用程序的任何方法（或函数）可以作为一个插槽–只需将信号连接到它。如果信号发送数据，则接收函数也将接收该数据。许多Qt小部件也有自己的内置插槽，这意味着你可以直接将Qt小部件连接在一起。</p><p>让我们来看看Qt信号的基础知识，以及如何使用它们来连接部件，从而在应用程序中实现目标。</p><p>保存下面的代码为文件<code>app.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;My App&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">window = MainWindow()</span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line">app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><h2 id="QPushButton-信号"><a href="#QPushButton-信号" class="headerlink" title="QPushButton 信号"></a>QPushButton 信号</h2><p>我们的简单应用目前有一个 QMainWindow，其中有一个 QPushButton 作为中心小部件。让我们开始将这个按钮与一个自定义的 Python 方法连接起来。这里我们创建一个简单的自定义槽 <code>the_button_was_clicked()</code>，该方法接受 QPushButton 对象发出的 <code>clicked</code> 信号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QPushButton</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;我的应用&quot;</span>)</span><br><span class="line"></span><br><span class="line">        button = QPushButton(<span class="string">&quot;按我!&quot;</span>)</span><br><span class="line">        button.clicked.connect(self.the_button_was_clicked)</span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(button)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">the_button_was_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;按钮被点击!&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">window = MainWindow()</span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line">app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><p class="admonition admonition-run"><span class="admonition-kind"><i class="fas fa-rocket"></i></span> <em>运行这段代码!</em> 你会看到每次点击按钮时控制台都会打印出 "按钮被点击!"。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">按钮被点击!</span><br><span class="line">按钮被点击!</span><br><span class="line">按钮被点击!</span><br><span class="line">按钮被点击!</span><br></pre></td></tr></table></figure><h2 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h2><p>这是一个好的开始！我们已经知道，信号还可以发送数据，提供有关刚刚发生的事情的更多信息。<code>点击</code>信号也不例外，它还为按钮提供了选中（或切换）状态。对于普通按钮，这始终为<code>False</code>，因此我们的第一个插槽忽略了这些数据。但是，我们可以使按钮可检查并查看效果。下面是一个例子，展示如何在槽中接收信号发送的数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QPushButton</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;我的应用&quot;</span>)</span><br><span class="line"></span><br><span class="line">        button = QPushButton(<span class="string">&quot;按我!&quot;</span>)</span><br><span class="line">        button.setCheckable(<span class="literal">True</span>)</span><br><span class="line">        button.clicked.connect(self.the_button_was_clicked)</span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(button)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">the_button_was_clicked</span>(<span class="params">self, checked</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;被点击!&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;选中？&quot;</span>, checked)</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">window = MainWindow()</span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line">app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><p class="admonition admonition-run"><span class="admonition-kind"><i class="fas fa-rocket"></i></span> <em>运行这段代码!</em> 每次点击按钮时，控制台会显示 "被点击!" 和按钮的状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">被点击!</span><br><span class="line">选中？ <span class="literal">True</span></span><br><span class="line">被点击!</span><br><span class="line">选中？ <span class="literal">False</span></span><br><span class="line">被点击!</span><br><span class="line">选中？ <span class="literal">True</span></span><br><span class="line">被点击!</span><br><span class="line">选中？ <span class="literal">False</span></span><br><span class="line">被点击!</span><br><span class="line">选中？ <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>你可以将任意多个插槽连接到一个信号，并且可以在插槽上同时响应不同版本的信号。</p><h2 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h2><p>通常，将小部件的当前状态存储在 Python 变量中是有用的。这样你可以像处理其他 Python 变量一样处理这些值，而无需访问原始小部件。你可以在实例变量中存储这些值。下面的例子展示了如何存储按钮被选中<code>button_is_checked</code>的状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.button_is_checked = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;My App&quot;</span>)</span><br><span class="line"></span><br><span class="line">        button = QPushButton(<span class="string">&quot;Press Me!&quot;</span>)</span><br><span class="line">        button.setCheckable(<span class="literal">True</span>)</span><br><span class="line">        button.clicked.connect(self.the_button_was_toggled)</span><br><span class="line">        button.setChecked(self.button_is_checked)</span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(button)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">the_button_was_toggled</span>(<span class="params">self, checked</span>):</span><br><span class="line">        self.button_is_checked = checked</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(self.button_is_checked)</span><br></pre></td></tr></table></figure><p>首先，我们将变量的默认值设置为<code>True</code>，然后使用默认值设置小部件的初始状态。当小部件状态发生变化时，我们会收到信号并更新变量以匹配。</p><p>您可以将此模式用于任何PySide小部件。如果小部件不提供发送当前状态的信号，则需要在处理程序中直接从小部件检索值。例如，我们在这里检查按下的处理程序中的已检查状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.button_is_checked = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;My App&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.button = QPushButton(<span class="string">&quot;Press Me!&quot;</span>)</span><br><span class="line">        self.button.setCheckable(<span class="literal">True</span>)</span><br><span class="line">        self.button.released.connect(self.the_button_was_released)</span><br><span class="line">        self.button.setChecked(self.button_is_checked)</span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(self.button)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">the_button_was_released</span>(<span class="params">self</span>):</span><br><span class="line">        self.button_is_checked = self.button.isChecked()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(self.button_is_checked)</span><br></pre></td></tr></table></figure><p class="admonition admonition-note"><span class="admonition-kind"><i class="fas fa-sticky-note"></i></span>我们需要在<code>self</code>上保留一个按钮的引用，这样我们就可以在我们的插槽中访问它。</p><h2 id="改变界面"><a href="#改变界面" class="headerlink" title="改变界面"></a>改变界面</h2><p>到目前为止，我们已经了解了如何接受信号并将输出打印到控制台。但是，当我们点击按钮时，在界面中发生一些事情怎么样？让我们更新我们的插槽方法来修改按钮，更改文本并禁用按钮，使其不再可点击。我们还将暂时关闭可检查状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;My App&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.button = QPushButton(<span class="string">&quot;Press Me!&quot;</span>)</span><br><span class="line">        self.button.clicked.connect(self.the_button_was_clicked)</span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(self.button)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">the_button_was_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        self.button.setText(<span class="string">&quot;You already clicked me.&quot;</span>)</span><br><span class="line">        self.button.setEnabled(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Also change the window title.</span></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;My Oneshot App&quot;</span>)</span><br></pre></td></tr></table></figure><p>同样，因为我们需要能够访问<code>the_button_was_clicked</code>方法中的<code>按钮</code>，所以我们自己保留了对它的引用。通过向<code>setText（）</code>传递字符串来更改按钮的文本。要禁用按钮，请使用<code>False</code>调用<code>setEnabled（）</code>。</p><p class="admonition admonition-run"><span class="admonition-kind"><i class="fas fa-rocket"></i></span> <em>运行这段代码!</em> 如果单击按钮，文本将更改，按钮将变得无法单击。</p><p>不限于更改触发信号的按钮，你可以在插槽方法中做任何您想做的事情。例如，尝试将以下行添加到<code>the_button_was_clicked（）</code>方法中，以更改窗口标题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.setWindowTitle(<span class="string">&quot;A new window title&quot;</span>)</span><br></pre></td></tr></table></figure><p>大多数小部件都有自己的信号，我们用于窗口的<code>QMainWindow</code>也不例外。在以下更复杂的示例中，我们将<code>QMainWindow</code>上的<code>windowTitleChanged</code>信号连接到自定义插槽方法。</p><p>在以下示例中，我们将<code>QMainWindow</code>上的<code>windowTitleChanged</code>信号连接到方法槽<code>the_window_title_changed（）</code>。此插槽还接收新的窗口标题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QPushButton</span><br><span class="line"></span><br><span class="line">window_titles = [</span><br><span class="line">    <span class="string">&quot;My App&quot;</span>,</span><br><span class="line">    <span class="string">&quot;My App&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Still My App&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Still My App&quot;</span>,</span><br><span class="line">    <span class="string">&quot;What on earth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;What on earth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;This is surprising&quot;</span>,</span><br><span class="line">    <span class="string">&quot;This is surprising&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Something went wrong&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.n_times_clicked = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;My App&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.button = QPushButton(<span class="string">&quot;Press Me!&quot;</span>)</span><br><span class="line">        self.button.clicked.connect(self.the_button_was_clicked)</span><br><span class="line"></span><br><span class="line">        self.windowTitleChanged.connect(self.the_window_title_changed)</span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(self.button)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">the_button_was_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Clicked.&quot;</span>)</span><br><span class="line">        new_window_title = choice(window_titles)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Setting title:  %s&quot;</span> % new_window_title)</span><br><span class="line">        self.setWindowTitle(new_window_title)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">the_window_title_changed</span>(<span class="params">self, window_title</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Window title changed: %s&quot;</span> % window_title)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> window_title == <span class="string">&quot;Something went wrong&quot;</span>:</span><br><span class="line">            self.button.setDisabled(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">window = MainWindow()</span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line">app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><p>首先，我们设置一个窗口标题列表——我们将使用Python内置的<code>random.choice（）</code>从这个列表中随机选择一个。我们将自定义插槽方法<code>the_window_title_changed（）</code>挂钩到窗口的<code>windowTitleChanged</code>信号。</p><p>当我们单击按钮时，窗口标题将随机更改。如果新窗口标题等于“Something went wrong”，则按钮将被禁用。</p><p class="admonition admonition-run"><span class="admonition-kind"><i class="fas fa-rocket"></i></span> <em>运行这段代码!</em> 反复单击按钮，直到标题变为“Something went wrong”，按钮将被禁用。</p><p>在这个例子中有几件事需要注意。</p><p>首先，在设置窗口标题时，并不总是发出<code>windowTitleChanged</code>信号。只有当新标题与前一个标题不同时，才会发出信号。如果您多次设置同一标题，则信号将仅在第一次发出。重要的是要仔细检查信号触发的条件，以避免在应用程序中使用它们时感到惊讶。</p><p>其次，请注意我们如何使用信号将事物联系在一起。发生的一件事——按下按钮——可以触发其他多件事依次发生。这些后续效应不需要知道是什么导致了它们，而只需要遵循简单的规则。在构建GUI应用程序时，将效果与其触发器解耦是需要理解的关键概念之一。</p><p>在本节中，我们介绍了信号和插槽。我们已经演示了一些简单的信号，以及如何使用它们在应用程序周围传递数据和状态。接下来，我们将看看Qt为您的应用程序提供的小部件，以及它们提供的信号。</p><h2 id="直接连接小部件"><a href="#直接连接小部件" class="headerlink" title="直接连接小部件"></a>直接连接小部件</h2><p>到目前为止，我们已经看到了将小部件信号连接到Python方法的示例。当小部件发出信号时，我们的Python方法会被调用并从信号中接收数据。但你并不总是需要使用Python函数来处理信号——你也可以直接将Qt小部件相互连接。</p><p>在下面的示例中，我们将 <code>QLineEdit</code>小部件和<code>QLabel</code>添加到窗口中。在窗口的<code>__init__（）</code>中，我们将行编辑<code>textChanged</code>信号连接到<code>QLabel</code>上的<code>setText（）</code>方法。现在，每当<code>QLineEdit</code>中的文本发生变化时，<code>QLabel</code>都会将该文本接收到其<code>setText（）</code>方法中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> (</span><br><span class="line">    QApplication,</span><br><span class="line">    QLabel,</span><br><span class="line">    QLineEdit,</span><br><span class="line">    QMainWindow,</span><br><span class="line">    QVBoxLayout,</span><br><span class="line">    QWidget,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;My App&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.label = QLabel()</span><br><span class="line"></span><br><span class="line">        self.<span class="built_in">input</span> = QLineEdit()</span><br><span class="line">        self.<span class="built_in">input</span>.textChanged.connect(self.label.setText)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        layout.addWidget(self.<span class="built_in">input</span>)</span><br><span class="line">        layout.addWidget(self.label)</span><br><span class="line"></span><br><span class="line">        container = QWidget()</span><br><span class="line">        container.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(container)</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">window = MainWindow()</span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line">app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><p>请注意，为了将输入连接到标签，必须同时定义输入和标签。这段代码将两个小部件添加到布局中，并在窗口上进行设置。稍后我们将详细介绍布局，您现在可以忽略它。</p><p class="admonition admonition-run"><span class="admonition-kind"><i class="fas fa-rocket"></i></span> <em>运行这段代码!</em> 在上方的框中键入一些文本，您将看到它立即出现在标签上。</p><p><img src="https://cdnjson.com/images/2024/08/03/signals-direct.webp" alt="signals-direct.webp"></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>用户与Qt应用程序的每次交互都是一个事件。有许多类型的事件，每种事件都代表不同类型的交互。Qt使用事件对象表示这些事件，这些事件对象打包了有关发生的事情的信息。这些事件被传递给发生交互的小部件上的特定事件处理程序。</p><p>通过定义自定义或扩展的事件处理程序，您可以更改小部件对这些事件的响应方式。事件处理程序的定义与任何其他方法一样，但名称特定于它们处理的事件类型。</p><p>小部件接收的主要事件之一是<code>QMouseEvent</code>。QMouseEvent事件是为小部件上的每次鼠标移动和按钮点击创建的。以下事件处理程序可用于处理鼠标事件：</p><table><thead><tr><th>事件处理程序</th><th>事件类型</th></tr></thead><tbody><tr><td><code>mouseMoveEvent()</code></td><td>鼠标移动</td></tr><tr><td><code>mousePressEvent()</code></td><td>鼠标按钮按下</td></tr><tr><td><code>mouseReleaseEvent()</code></td><td>鼠标按钮释放</td></tr><tr><td><code>mouseDoubleClickEvent()</code></td><td>检测到双击</td></tr></tbody></table><p>例如，单击小部件将导致<code>QMouseEvent</code>被发送到该小部件上的<code>mousePressEvent（）</code>事件处理程序。此处理程序可以使用事件对象来查找有关发生了什么的信息，例如触发事件的原因以及具体发生在哪里。</p><p>您可以通过子类化和重写类上的处理程序方法来拦截事件。您可以选择过滤、修改或忽略事件，通过使用<code>super（）</code>调用父类函数，将它们传递给事件的正常处理程序。这些可以添加到您的主窗口类中，如下所示。在每种情况下，<code>e</code>都会收到传入的事件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QApplication, QLabel, QMainWindow</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.label = QLabel(<span class="string">&quot;Click in this window&quot;</span>)</span><br><span class="line">        self.setCentralWidget(self.label)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseMoveEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        self.label.setText(<span class="string">&quot;mouseMoveEvent&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        self.label.setText(<span class="string">&quot;mousePressEvent&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseReleaseEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        self.label.setText(<span class="string">&quot;mouseReleaseEvent&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseDoubleClickEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        self.label.setText(<span class="string">&quot;mouseDoubleClickEvent&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">window = MainWindow()</span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line">app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><p class="admonition admonition-run"><span class="admonition-kind"><i class="fas fa-rocket"></i></span> <em>运行这段代码!</em> 尝试在窗口中移动和单击（并双击），然后观察事件的显示。</p><p>您会注意到，只有当您按下按钮时，鼠标移动事件才会被注册。您可以通过在窗口上调用<code>self.setMouseTracking（True）</code>来更改此设置。您可能还会注意到，按下按钮时，按下（单击）和双击事件都会触发。只有松开按钮时才会触发释放事件。通常，要注册用户的点击，您应该注意鼠标按下和释放。</p><p>在事件处理程序中，您可以访问事件对象。此对象包含有关事件的信息，可用于根据具体发生的情况做出不同的响应。接下来我们将查看鼠标事件对象。</p><h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><p>Qt中的所有鼠标事件都使用<code>QMouseEvent</code>对象进行跟踪，有关事件的信息可以从以下事件方法中读取：</p><table><thead><tr><th>方法</th><th>返回值</th></tr></thead><tbody><tr><td><code>.button()</code></td><td>触发此事件的特定按钮</td></tr><tr><td><code>.buttons()</code></td><td>所有鼠标按钮的状态（按位或标志）</td></tr><tr><td><code>.globalPos()</code></td><td>以 <code>QPoint</code> 形式的应用程序全局位置</td></tr><tr><td><code>.globalX()</code></td><td>应用程序全局 <em>水平</em> X 位置</td></tr><tr><td><code>.globalY()</code></td><td>应用程序全局 <em>垂直</em> Y 位置</td></tr><tr><td><code>.pos()</code></td><td>以 <code>QPoint</code> <em>整数</em> 形式的小部件相对位置</td></tr><tr><td><code>.posF()</code></td><td>以 <code>QPointF</code> <em>浮点数</em> 形式的小部件相对位置</td></tr></tbody></table><p>你可以在事件处理程序中使用这些方法来以不同方式响应不同的事件或完全忽略它们。位置方法提供全局和本地（窗口小部件相对）位置信息作为 <code>QPoint</code> 对象，而按钮使用 <code>Qt.MouseButton</code> 命名空间中的鼠标按钮类型进行报告。</p><p>例如，以下内容允许我们对窗口上的左键、右键或中键单击做出不同的响应：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PySide6.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QApplication, QLabel, QMainWindow</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.label = QLabel(<span class="string">&quot;Click in this window&quot;</span>)</span><br><span class="line">        self.setCentralWidget(self.label)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="keyword">if</span> e.button() == Qt.MouseButton.LeftButton:</span><br><span class="line">            <span class="comment"># handle the left-button press in here</span></span><br><span class="line">            self.label.setText(<span class="string">&quot;mousePressEvent LEFT&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> e.button() == Qt.MouseButton.MiddleButton:</span><br><span class="line">            <span class="comment"># handle the middle-button press in here.</span></span><br><span class="line">            self.label.setText(<span class="string">&quot;mousePressEvent MIDDLE&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> e.button() == Qt.MouseButton.RightButton:</span><br><span class="line">            <span class="comment"># handle the right-button press in here.</span></span><br><span class="line">            self.label.setText(<span class="string">&quot;mousePressEvent RIGHT&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseReleaseEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="keyword">if</span> e.button() == Qt.MouseButton.LeftButton:</span><br><span class="line">            self.label.setText(<span class="string">&quot;mouseReleaseEvent LEFT&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> e.button() == Qt.MouseButton.MiddleButton:</span><br><span class="line">            self.label.setText(<span class="string">&quot;mouseReleaseEvent MIDDLE&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> e.button() == Qt.MouseButton.RightButton:</span><br><span class="line">            self.label.setText(<span class="string">&quot;mouseReleaseEvent RIGHT&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseDoubleClickEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="keyword">if</span> e.button() == Qt.MouseButton.LeftButton:</span><br><span class="line">            self.label.setText(<span class="string">&quot;mouseDoubleClickEvent LEFT&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> e.button() == Qt.MouseButton.MiddleButton:</span><br><span class="line">            self.label.setText(<span class="string">&quot;mouseDoubleClickEvent MIDDLE&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> e.button() == Qt.MouseButton.RightButton:</span><br><span class="line">            self.label.setText(<span class="string">&quot;mouseDoubleClickEvent RIGHT&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">window = MainWindow()</span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line">app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><p>按钮标识符在<code>Qt.MouseButton</code>命名空间中定义。，如下所示：</p><table><thead><tr><th>标识符</th><th>值（二进制）</th><th>表示</th></tr></thead><tbody><tr><td><code>Qt.MouseButton.NoButton</code></td><td>0 (<code>000</code>)</td><td>未按下任何按钮，或事件与按钮按下无关。</td></tr><tr><td><code>Qt.MouseButton.LeftButton</code></td><td>1 (<code>001</code>)</td><td>左键被按下</td></tr><tr><td><code>Qt.MouseButton.RightButton</code></td><td>2 (<code>010</code>)</td><td>右键被按下</td></tr><tr><td><code>Qt.MouseButton.MiddleButton</code></td><td>4 (<code>100</code>)</td><td>中键被按下</td></tr></tbody></table><p class="admonition admonition-note"><span class="admonition-kind"><i class="fas fa-sticky-note"></i></span>在左手鼠标上，左右按钮的位置是相反的，即按下最右侧的按钮将返回<code>Qt.MouseButton.LeftButton</code>。这意味着您不需要在代码中考虑鼠标方向。</p><h2 id="上下文菜单"><a href="#上下文菜单" class="headerlink" title="上下文菜单"></a>上下文菜单</h2><p>上下文菜单是小型上下文相关菜单，通常在右键单击窗口时出现。Qt支持生成这些菜单，小部件有一个特定的事件用于触发它们。在下面的示例中，我们将在<code>QMainWindow</code>中拦截<code>contextMenuEvent（）</code>。每当要显示上下文菜单时，就会触发此事件，并传递<code>QContextMenuEvent</code>类型的单值事件。</p><p>为了拦截事件，我们只需用同名的新方法覆盖对象方法。因此，在这种情况下，我们可以在<code>MainWindow</code>子类上创建一个名为<code>contextMenuEvent（）</code>的方法，它将接收此类型的所有事件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PySide6.QtGui <span class="keyword">import</span> QAction</span><br><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QMenu</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">contextMenuEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        context = QMenu(self)</span><br><span class="line">        context.addAction(QAction(<span class="string">&quot;test 1&quot;</span>, self))</span><br><span class="line">        context.addAction(QAction(<span class="string">&quot;test 2&quot;</span>, self))</span><br><span class="line">        context.addAction(QAction(<span class="string">&quot;test 3&quot;</span>, self))</span><br><span class="line">        context.<span class="built_in">exec</span>(e.globalPos())</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">window = MainWindow()</span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line">app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><p>如果您运行以上代码并在窗口中右键单击，您将看到出现一个上下文菜单。您可以在菜单操作上按正常方式设置触发槽<code>triggered slots</code>（并重新使用为菜单和工具栏定义的操作）。</p><p class="admonition admonition-note"><span class="admonition-kind"><i class="fas fa-sticky-note"></i></span>当将初始位置传递给<code>exec（）</code>方法时，这必须相对于定义时传递的父级。在这种情况下，我们将<code>self</code>作为父级传递，因此我们可以使用全局位置。</p><p>为了完整起见，实际上有一种基于信号的方法来创建上下文菜单：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line">        self.setContextMenuPolicy(Qt.CustomContextMenu)</span><br><span class="line">        self.customContextMenuRequested.connect(self.on_context_menu)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_context_menu</span>(<span class="params">self, pos</span>):</span><br><span class="line">        context = QMenu(self)</span><br><span class="line">        context.addAction(QAction(<span class="string">&quot;test 1&quot;</span>, self))</span><br><span class="line">        context.addAction(QAction(<span class="string">&quot;test 2&quot;</span>, self))</span><br><span class="line">        context.addAction(QAction(<span class="string">&quot;test 3&quot;</span>, self))</span><br><span class="line">        context.<span class="built_in">exec</span>(self.mapToGlobal(pos))</span><br></pre></td></tr></table></figure><p>这完全取决于你的选择。</p><h2 id="事件层次结构"><a href="#事件层次结构" class="headerlink" title="事件层次结构"></a>事件层次结构</h2><p>在PySide6中，每个小部件都是两个不同层次结构的一部分：Python对象层次结构和Qt布局层次结构。如何响应或忽略事件会影响UI的行为。</p><h2 id="Python继承转发"><a href="#Python继承转发" class="headerlink" title="Python继承转发"></a>Python继承转发</h2><p>通常，你可能希望拦截一个事件并对其进行处理，但仍会触发默认的事件处理行为。如果你的对象是从标准小部件继承的，那么默认情况下它可能会实现合理的行为。您可以通过使用<code>super（）</code>调用父级的实现来触发此操作。</p><p class="admonition admonition-note"><span class="admonition-kind"><i class="fas fa-sticky-note"></i></span>这是Python父类，而不是PySide的父类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Mouse pressed!&quot;</span>)</span><br><span class="line">    <span class="built_in">super</span>().mousePressEvent(event)</span><br></pre></td></tr></table></figure><p>事件将继续正常运行，但您添加了一些非干扰行为。</p><h2 id="布局转发"><a href="#布局转发" class="headerlink" title="布局转发"></a>布局转发</h2><p>当你在应用程序中添加一个小部件时，它也会从布局中获得另一个父级。通过调用<code>.parent（）</code>可以找到小部件的父级。有时您手动指定这些父级，例如<code>QMenu</code>或<code>QDialog</code>，通常是自动指定的。例如，当您将小部件添加到主窗口时，主窗口将成为小部件的父窗口。</p><p>当为用户与UI的交互创建事件时，这些事件会传递给UI中最上面的小部件。因此，如果您在窗口上有一个按钮并单击该按钮，则该按钮将首先接收事件。</p><p>如果第一个小部件无法处理该事件或选择不处理，则该事件将向上冒泡到父小部件，父小部件将被轮流处理。这种冒泡一直持续到嵌套的小部件，直到事件被处理或到达主窗口。</p><p>在您自己的事件处理程序中，您可以选择通过调用<code>accept（）</code>方法将事件标记为已处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomButton</span>(<span class="title class_ inherited__">QPushButton</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        e.accept()</span><br></pre></td></tr></table></figure><p>或者，您可以通过在事件对象上调用<code>ignore（）</code>将其标记为未处理。在这种情况下，事件将继续在层次结构中冒泡：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomButton</span>(<span class="title class_ inherited__">QPushButton</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">event</span>(<span class="params">self, e</span>):</span><br><span class="line">        e.ignore()</span><br></pre></td></tr></table></figure><p>如果你想让你的小部件对事件透明，你可以安全地忽略你以某种方式实际响应的事件。同样，你可以选择接受你没有回应的事件，以使它们沉默。</p><p class="admonition admonition-tip"><span class="admonition-kind"><i class="fas fa-lightbulb"></i></span>    <b>原文信息：《PySide6 Signals, Slots & Events》</b><br />    <b>原作者：Martin Fitzpatrick</b><br />    <b>出处：<a href="https://www.pythonguis.com/tutorials/pyside6-signals-slots-events/" target="blank">https://www.pythonguis.com/tutorials/pyside6-signals-slots-events/</a></b><br />    <b>免责声明：本翻译内容仅代表翻译者的个人观点与理解，原作者对此翻译版本并未进行认可，翻译过程中可能存在误差，读者应自行核实原文内容。</b></p><style>.admonition a {    color: #EB5160;    text-decoration: none;}.admonition {    position: relative;    padding: 1rem 3rem 1rem 1rem;    background-color: #E9EBEF;    position: relative;    line-height: 1.8em;    border-radius: 5px;    border: 1px solid #D4D6DA;    margin: 2rem 0;}.admonition-kind {    opacity: 0.2;    position: absolute;    top: 0.25rem;    right: 0.25rem;    font-size: 1.5rem;}.admonition-body {    margin-right: 2rem;}p.admonition {    font-size: 1rem;    margin: 0.5rem 0;    font-family: 'Montserrat', 'Verdana', 'Geneva', 'Tahoma', sans-serif;}.admonition-note {    background-color: #FFFAED;    color: #b18f12;    border-color: #b18f12;}.admonition-tip {    background-color: #ECF1F6;    color: #376F9F;    border-color: #376F9F;}.admonition-warning {    background-color: #FBE9E7;    color: #FE4A49;    border-color: #FE4A49;}.admonition-ok {    background-color: #EEF7EF;    color: #4CAF50;    border-color: #4CAF50;}.admonition-challenge {    color: #3F51B5;}article img {    display: block;    float: none;    clear: both;    max-width: 80%;    height: auto;    margin: 3rem auto;}article img+em {    font-family: 'Poppins', 'Century Gothic', 'AppleGothic', sans-serif;    display: block;    width: 80%;    font-style: normal;    font-size: 0.8rem;    margin: -2.5rem auto 3rem auto;    text-align: center;    color: #888;}#title-style{        margin: 0 auto;        text-align: center;    }p{    -webkit-text-size-adjust: 100%;    color: #111;    letter-spacing: normal;    word-spacing: normal;    text-rendering: auto;    font-size: 1rem;    line-height: 1.8;    font-weight: 400;}</style>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PySide6】使用PySide6创建您的第一个应用程序</title>
      <link href="/2024/02/21/%E3%80%90PySide6%E3%80%91%E4%BD%BF%E7%94%A8PySide6%E5%88%9B%E5%BB%BA%E6%82%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
      <url>/2024/02/21/%E3%80%90PySide6%E3%80%91%E4%BD%BF%E7%94%A8PySide6%E5%88%9B%E5%BB%BA%E6%82%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<div id="title-style">    <h1>【PySide6】使用PySide6创建您的第一个应用程序</h1>    <p>使用Python和Qt创建一个简单的“Hello World！”应用程序</p></div><p>在本教程中，我们将学习如何使用 PySide 来使用 Python 创建桌面应用程序。首先，我们将创建一系列简单的窗口，以确保 PySide 正常工作，并介绍一些基本概念。然后，我们将简要了解事件循环及其与 Python 中 GUI 编程的关系。最后，我们将介绍 Qt 的 QMainWindow，它提供了一些常用的界面元素，如工具栏和菜单。这些将在后续的教程中更详细地探讨。</p><h1 id="创建一个应用程序"><a href="#创建一个应用程序" class="headerlink" title="创建一个应用程序"></a>创建一个应用程序</h1><p>让我们创建我们的第一个应用程序吧！首先创建一个新的 Python 文件 —— 你可以随意命名（例如 app.py），并将其保存在可访问的地方。我们将在这个文件中编写我们的简单应用程序。</p><p class="admonition admonition-tip"><span class="admonition-kind"><i class="fas fa-lightbulb"></i></span> 随着我们的进展，我们将在这个文件中进行编辑，您可能想要回到代码的早期版本，因此请记得定期备份。</p><p>以下是应用程序的源代码。请逐字输入，并小心不要出错。如果出现错误，Python 将会提示您出了什么问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅在需要访问命令行参数时使用</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个应用程序只需要一个 QApplication 实例。</span></span><br><span class="line"><span class="comment"># 传入 sys.argv 可以允许应用程序使用命令行参数。</span></span><br><span class="line"><span class="comment"># 如果你确定不会使用命令行参数，也可以使用 QApplication([])。</span></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 Qt 窗口小部件，它将成为我们的窗口。</span></span><br><span class="line">window = QWidget()</span><br><span class="line">window.show()  <span class="comment"># 重要!!!!! 窗口默认是隐藏的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动事件循环。</span></span><br><span class="line">app.<span class="built_in">exec</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在你退出并且事件循环停止之前，你的应用程序不会到达这里。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p class="admonition admonition-run"><span class="admonition-kind"><i class="fas fa-rocket"></i></span> <em>运行这段代码!</em> 您现在将会看到您的窗口。Qt 自动创建了一个带有普通窗口装饰的窗口，您可以像任何窗口一样拖动它并调整其大小。</p><p>您所看到的将取决于您在哪个平台上运行此示例。下面的图像显示了在 Windows、macOS 和 Linux（Ubuntu）上显示的窗口。</p><p><img alt="Our window, as seen on Windows, macOS and Linux." height="331" loading="lazy" src="https://cdnjson.com/images/2024/02/21/window9ee2ec21014ee61d.png"width="1154"></p><h1 id="让我们逐步解释代码"><a href="#让我们逐步解释代码" class="headerlink" title="让我们逐步解释代码"></a>让我们逐步解释代码</h1><p>首先，我们导入了应用程序中需要的 PySide 类。我们从<code>QtWidgets</code>模块中导入了<code>QApplication</code>类，它是应用程序的处理程序，以及 QWidget 类，它是一个基本的空 GUI 小部件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br></pre></td></tr></table></figure><p>Qt 的主要模块包括 <code>QtWidgets</code>、<code>QtGui</code> 和 <code>QtCore</code>。</p><p class="admonition admonition-tip"><span class="admonition-kind"><i class="fas fa-lightbulb"></i></span> 你可以使用 from &#60;module&#62; import * 这种方式，但是在 Python 中这种全局导入通常是不被推荐的，所以我们在这里会避免使用它。</p><p>接下来，我们创建一个 <code>QApplication</code> 的实例，将 <code>sys.argv</code> 作为参数传入，其中 <code>sys.argv</code> 是一个 Python 列表，包含了传递给应用程序的命令行参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app = QApplication(sys.argv)</span><br></pre></td></tr></table></figure><p>如果你知道你不会使用命令行参数来控制 Qt，你可以传入一个空列表，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app = QApplication([])</span><br></pre></td></tr></table></figure><p>接下来，我们使用变量名 <code>window</code> 创建一个 <code>QWidget</code> 的实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window = QWidget()</span><br><span class="line">window.show()</span><br></pre></td></tr></table></figure><p>在 Qt 中，所有顶级小部件都是窗口，也就是说，它们没有父级，并且不嵌套在另一个小部件或布局中。这意味着你可以在任何你喜欢的小部件上创建一个窗口。</p><p class="admonition admonition-warning"><span class="admonition-kind"><i class="fas fa-exclamation-circle"></i></span>小部件如果没有父级，默认情况下是不可见的。因此，在创建窗口对象后，我们必须始终调用 .show() 方法使其可见。你可以移除 .show() 并运行应用程序，但是你将无法退出它！</p><p class="admonition admonition-tip"><span class="admonition-kind"><i class="fas fa-lightbulb"></i></span>窗口是什么？ - 承载应用程序的用户界面 - 每个应用程序至少需要一个窗口（但可以有多个） - 当最后一个窗口关闭时，默认情况下应用程序会退出</p><p>最后我们调用<code>app.exec()</code>来启动事件循环。</p><h1 id="什么是事件循环？"><a href="#什么是事件循环？" class="headerlink" title="什么是事件循环？"></a>什么是事件循环？</h1><p>在将窗口显示在屏幕上之前，有几个关键概念需要介绍一下，这些概念涉及到 Qt 世界中应用程序的组织方式。如果你已经熟悉事件循环，可以安全地跳过到下一节。</p><p>每个 Qt 应用程序的核心是 <code>QApplication</code> 类。每个应用程序都需要一个 —— 而且只能有一个 —— <code>QApplication</code> 对象来运行。这个对象承载着你的应用程序的事件循环 —— 控制所有用户与 GUI 的交互的核心循环。</p><p><img alt="Our window, as seen on Windows, macOS and Linux." height="331" loading="lazy" src="https://cdnjson.com/images/2024/02/21/eventloopebfe28ed003c9a69.png"width="1154"></p><p>与你的应用程序的每次交互 —— 无论是按键、鼠标点击还是鼠标移动 —— 都会生成一个事件，然后被放置在事件队列中。在事件循环中，队列在每次迭代时都会被检查，如果发现等待处理的事件，就会将事件和控制权传递给特定的事件处理程序。事件处理程序处理完事件后，将控制权再次传递回事件循环，等待更多的事件。每个应用程序只有一个正在运行的事件循环。</p><p class="admonition admonition-tip"><span class="admonition-kind"><i class="fas fa-lightbulb"></i></span>QApplication 类 - QApplication 承载着 Qt 事件循环 - 需要一个 QApplication 实例 - 你的应用程序在事件循环中等待，直到有操作发生 - 在任何时候只有一个事件循环</p><p>下划线是因为在 Python 2.7 中 <code>exec</code> 是一个保留字。PySide 处理这个问题的方法是在 Qt 库中使用的名称后添加下划线。例如，你还会看到小部件上的 <code>.print_()</code> 方法。</p><h1 id="QMainWindow"><a href="#QMainWindow" class="headerlink" title="QMainWindow"></a>QMainWindow</h1><p>正如我们在上一部分发现的那样，在 Qt 中任何小部件都可以成为窗口。例如，如果你将 <code>QtWidgets</code> 替换为 <code>QPushButton</code>。在下面的示例中，你将得到一个带有单个可点击按钮的窗口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QApplication, QPushButton</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">window = QPushButton(<span class="string">&quot;Push Me&quot;</span>)</span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line">app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><p>这很好，但实际上并不是非常有用 —— 很少有需要只包含单个控件的用户界面！但是，正如我们稍后将发现的那样，使用布局将小部件嵌套在其他小部件中的能力意味着你可以在一个空的 <code>QWidget</code> 内构建复杂的用户界面。</p><p>但是，Qt 已经为你提供了解决方案 —— <code>QMainWindow</code>。这是一个预制的小部件，提供了许多标准窗口功能，你在应用程序中会用到，包括工具栏、菜单、状态栏、可停靠的小部件等等。我们稍后会看到这些高级特性，但现在，我们将在我们的应用程序中添加一个简单的空 <code>QMainWindow</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">window = QMainWindow()</span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动事件循环.</span></span><br><span class="line">app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><p class="admonition admonition-run"><span class="admonition-kind"><i class="fas fa-rocket"></i></span> <em>运行这段代码!</em>你将会看到你的“主窗口”，但事实上它和之前的看起来没有区别</p><p>所以我们的 <code>QMainWindow</code> 目前并不是很有趣。我们可以通过添加一些内容来修复这个问题。如果你想创建一个自定义窗口，最好的方法是子类化 <code>QMainWindow</code>，然后在 <code>__init__</code> 块中包含窗口的设置。这样可以使窗口的行为自包含。我们可以添加我们自己的 <code>QMainWindow</code> 子类 —— 把它称为 <code>MainWindow</code>，以保持简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PySide6.QtCore <span class="keyword">import</span> QSize, Qt</span><br><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QPushButton</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子类QMainWindow可自定义应用程序的主窗口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;My App&quot;</span>)</span><br><span class="line"></span><br><span class="line">        button = QPushButton(<span class="string">&quot;Press Me!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置窗口的中心部件。</span></span><br><span class="line">        self.setCentralWidget(button)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">window = MainWindow()</span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line">app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><p>在这个演示中，我们使用了一个 <code>QPushButton</code>。核心的 Qt 小部件总是从 <code>QtWidgets</code> 命名空间中导入，就像 <code>QMainWindow</code> 和 <code>QApplication</code> 类一样。当使用 <code>QMainWindow</code> 时，我们使用 <code>.setCentralWidget</code> 方法将一个小部件（这里是一个 <code>QPushButton</code>）放置在 <code>QMainWindow</code> 中 —— 默认情况下，它占据整个窗口。我们将在布局教程中讨论如何向窗口添加多个小部件。</p><p class="admonition admonition-tip"><span class="admonition-kind"><i class="fas fa-lightbulb"></i></span>当你子类化一个Qt类时，你必须始终调用super __init__函数，以便让Qt设置对象。</p><p>在我们的<code>__init__</code>块中，我们首先使用<code>.setWindowTitle()</code>来更改主窗口的标题。然后我们将第一个小部件——<code>QPushButton</code>——添加到窗口的中间。这是 Qt 中可用的基本小部件之一。在创建按钮时，您可以传递您想要按钮显示的文本。</p><p>最后，我们在窗口上调用<code>.setCentralWidget()</code>。这是一个特定于<code>QMainWindow</code>的函数，允许您设置放在窗口中间的小部件。</p><p class="admonition admonition-run"><span class="admonition-kind"><i class="fas fa-rocket"></i></span>运行它！现在您将再次看到您的窗口，但这次中间有QPushButton小部件。按下按钮将不会产生任何效果，我们接下来会解决这个问题。</p><p><img alt="Our window, as seen on Windows, macOS and Linux." height="331" loading="lazy" src="https://cdnjson.com/images/2024/02/21/window-buttonc436a03d1370552a.png"width="1154"></p><p class="admonition admonition-tip"><span class="admonition-kind"><i class="fas fa-lightbulb"></i></span> 我们将很快详细介绍更多小部件，但如果您不耐烦，并希望提前尝试，您可以查看<a href="http://doc.qt.io/qt-5/widget-classes.html#basic-widget-classes" target="blank">QWidget文档</a>。尝试向您的窗口添加不同的小部件！</p><h1 id="调整窗口和小部件的大小"><a href="#调整窗口和小部件的大小" class="headerlink" title="调整窗口和小部件的大小"></a>调整窗口和小部件的大小</h1><p>窗口当前可以自由调整大小——如果您用鼠标抓住任何角落，可以拖动并调整到任意大小。虽然让用户调整应用程序的大小是很好的，但有时您可能希望对最小或最大大小设置限制，或者锁定窗口为固定大小。</p><p>在 Qt 中，使用<code>QSize</code>对象定义大小。它按照宽度和高度的顺序接收参数。例如，以下代码将创建一个固定大小为 400x300 像素的窗口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PySide6.QtCore <span class="keyword">import</span> QSize, Qt</span><br><span class="line"><span class="keyword">from</span> PySide6.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QPushButton</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Subclass QMainWindow to customize your application&#x27;s main window</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;My App&quot;</span>)</span><br><span class="line"></span><br><span class="line">        button = QPushButton(<span class="string">&quot;Press Me!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.setFixedSize(QSize(<span class="number">400</span>, <span class="number">300</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Set the central widget of the Window.</span></span><br><span class="line">        self.setCentralWidget(button)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">window = MainWindow()</span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line">app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><p class="admonition admonition-run"><span class="admonition-kind"><i class="fas fa-rocket"></i></span> 运行它！您将看到一个固定大小的窗口——尝试调整此窗口的大小，你会发现无法调整。</p><p><img alt="Our window, as seen on Windows, macOS and Linux." height="331" loading="lazy" src="https://cdnjson.com/images/2024/02/21/window-fixed20cd661f173dcbae.png"width="1154"></p><p>在 Windows 和 Linux 上，右上角控件将被禁用。在 macOS 上，您可以最大化应用程序以填充屏幕，但中央小部件不会调整大小。</p><p>除了使用<code>.setFixedSize()</code>外，您还可以调用<code>.setMinimumSize()</code>和.<code>setMaximumSize()</code>分别设置最小和最大尺寸。自己尝试一下吧！</p><p class="admonition admonition-note"><span class="admonition-kind"><i class="fas fa-sticky-note"></i></span>你可以在任何小部件上使用这些调整大小的函数</p><p>在本节中，我们介绍了 QApplication 类、QMainWindow 类、事件循环，并尝试向窗口添加了一个简单的小部件。在下一节中，我们将探讨 Qt 提供的用于小部件和窗口相互通信以及与您自己代码通信的机制。</p><p class="admonition admonition-tip"><span class="admonition-kind"><i class="fas fa-lightbulb"></i></span>    <b>原文信息：《Creating your first app with PySide6》</b><br />    <b>原作者：Martin Fitzpatrick</b><br />    <b>出处：<a href="https://www.pythonguis.com/tutorials/pyside6-creating-your-first-window/" target="blank">https://www.pythonguis.com/tutorials/pyside6-creating-your-first-window/</a></b><br />    <b>免责声明：本翻译内容仅代表翻译者的个人观点与理解，原作者对此翻译版本并未进行认可，翻译过程中可能存在误差，读者应自行核实原文内容。</b></p><style>.admonition a {    color: #EB5160;    text-decoration: none;}.admonition {    position: relative;    padding: 1rem 3rem 1rem 1rem;    background-color: #E9EBEF;    position: relative;    line-height: 1.8em;    border-radius: 5px;    border: 1px solid #D4D6DA;    margin: 2rem 0;}.admonition-kind {    opacity: 0.2;    position: absolute;    top: 0.25rem;    right: 0.25rem;    font-size: 1.5rem;}.admonition-body {    margin-right: 2rem;}p.admonition {    font-size: 1rem;    margin: 0.5rem 0;    font-family: 'Montserrat', 'Verdana', 'Geneva', 'Tahoma', sans-serif;}.admonition-note {    background-color: #FFFAED;    color: #b18f12;    border-color: #b18f12;}.admonition-tip {    background-color: #ECF1F6;    color: #376F9F;    border-color: #376F9F;}.admonition-warning {    background-color: #FBE9E7;    color: #FE4A49;    border-color: #FE4A49;}.admonition-ok {    background-color: #EEF7EF;    color: #4CAF50;    border-color: #4CAF50;}.admonition-challenge {    color: #3F51B5;}article img {    display: block;    float: none;    clear: both;    max-width: 80%;    height: auto;    margin: 3rem auto;}article img+em {    font-family: 'Poppins', 'Century Gothic', 'AppleGothic', sans-serif;    display: block;    width: 80%;    font-style: normal;    font-size: 0.8rem;    margin: -2.5rem auto 3rem auto;    text-align: center;    color: #888;}#title-style{        margin: 0 auto;        text-align: center;    }p{    -webkit-text-size-adjust: 100%;    color: #111;    letter-spacing: normal;    word-spacing: normal;    text-rendering: auto;    font-size: 1rem;    line-height: 1.8;    font-weight: 400;}</style>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>noip-duc</title>
      <link href="/2024/01/22/noip-duc/"/>
      <url>/2024/01/22/noip-duc/</url>
      
        <content type="html"><![CDATA[<h1 id="noip-duc"><a href="#noip-duc" class="headerlink" title="noip-duc"></a>noip-duc</h1><p>一个noip.com的动态更新客户端（DUC）的python脚本，适用于部分无法安装官方DUC的环境。同时支持IPv4和IPv6地址</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>你需要在 <a href="https://my.noip.com/dynamic-dns">https://my.noip.com/dynamic-dns</a> 创建一个AAAA记录的hostname，才能实现这个hostname的ipv4与ipv6同时更新。否则noip.com只会更新ipv4地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 20240122</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">username = <span class="string">&#x27;your Enail&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;your password&#x27;</span></span><br><span class="line">time_interval = <span class="number">30</span>  <span class="comment"># 时间间隔(分钟)</span></span><br><span class="line">hostname = <span class="string">&#x27;your noip.com domain&#x27;</span>  <span class="comment"># DDNS主机名</span></span><br><span class="line">user_agent = <span class="string">&#x27;no-ip shell script/1.0 mail@mail.com&#x27;</span></span><br><span class="line">noip_host = <span class="string">&#x27;https://dynupdate.no-ip.com/nic/update?&#x27;</span>  <span class="comment"># noip接口地址</span></span><br><span class="line">icanhaz_probe_v4 = <span class="string">&#x27;https://ipv4.icanhazip.com/&#x27;</span>  <span class="comment"># ipv4探针地址</span></span><br><span class="line">icanhaz_probe_v6 = <span class="string">&#x27;https://ipv6.icanhazip.com/&#x27;</span>  <span class="comment"># ipv6探针地址</span></span><br><span class="line">ipw_probe_v4 = <span class="string">&#x27;https://4.ipw.cn/&#x27;</span>  <span class="comment"># ipv4探针地址</span></span><br><span class="line">ipw_probe_v6 = <span class="string">&#x27;https://6.ipw.cn/&#x27;</span>  <span class="comment"># ipv6探针地址</span></span><br><span class="line">np.random.seed(<span class="number">2024</span>)  <span class="comment"># 随机数种子</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getIP</span>():</span><br><span class="line">    ip_v4 = ip_v6 = <span class="literal">None</span></span><br><span class="line">    probes = [(icanhaz_probe_v4, ipw_probe_v6), (ipw_probe_v4, icanhaz_probe_v6)]</span><br><span class="line">    probe_v4, probe_v6 = probes[np.random.randint(<span class="number">0</span>, <span class="number">2</span>)]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ip_v4 = requests.get(probe_v4).text</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.ConnectionError:</span><br><span class="line">        ip_v4 = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.URLRequired:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ip探针地址设置错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ip_v6 = requests.get(probe_v6).text</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.ConnectionError:</span><br><span class="line">        ip_v6 = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.URLRequired:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ip探针地址设置错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;,&#x27;</span>.join(<span class="built_in">filter</span>(<span class="literal">None</span>, [ip_v4, ip_v6])).replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">updateIP</span>(<span class="params">my_ip</span>):</span><br><span class="line">    base64_encoded_auth_string = base64.b64encode(<span class="string">f&quot;<span class="subst">&#123;username&#125;</span>:<span class="subst">&#123;password&#125;</span>&quot;</span>.encode()).decode()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">f&quot;Basic <span class="subst">&#123;base64_encoded_auth_string&#125;</span>&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: user_agent</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(noip_host + <span class="string">&#x27;hostname=&#x27;</span> + hostname + <span class="string">&#x27;&amp;myip=&#x27;</span> + my_ip, headers=headers)</span><br><span class="line">        error_status = [<span class="string">&#x27;nohost&#x27;</span>, <span class="string">&#x27;badauth&#x27;</span>, <span class="string">&#x27;badagent&#x27;</span>, <span class="string">&#x27;!donator&#x27;</span>, <span class="string">&#x27;abuse&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> res.text <span class="keyword">in</span> error_status:</span><br><span class="line">            <span class="built_in">print</span>(res.text)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> res.text == <span class="string">&#x27;911&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;noip 911,30分钟后重试&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">1801</span>)</span><br><span class="line">            <span class="keyword">return</span> updateIP(my_ip)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(res.text)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.ConnectionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;与noip连接失败&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">600</span>)</span><br><span class="line">        <span class="keyword">return</span> updateIP(my_ip)</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.Timeout:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;连接超时&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">600</span>)</span><br><span class="line">        <span class="keyword">return</span> updateIP(my_ip)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;未知异常<span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    current_ip = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            new_ip = getIP()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;获取ip失败<span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> current_ip != new_ip:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;新ip:<span class="subst">&#123;new_ip&#125;</span>, 正在更新ddns&#x27;</span>)</span><br><span class="line">            current_ip = new_ip</span><br><span class="line">            result = updateIP(new_ip)</span><br><span class="line">            <span class="keyword">if</span> result <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;ip未发生变化&#x27;</span>)</span><br><span class="line">        time.sleep(time_interval*<span class="number">60</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 资源分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Hello算法》</title>
      <link href="/2023/09/11/%E3%80%8AHello%E7%AE%97%E6%B3%95%E3%80%8B/"/>
      <url>/2023/09/11/%E3%80%8AHello%E7%AE%97%E6%B3%95%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="《Hello算法》"><a href="#《Hello算法》" class="headerlink" title="《Hello算法》"></a>《Hello算法》</h1><p>《Hello 算法》是一本开源免费、新手友好的数据结构与算法入门书。由力扣上剑指offer题解大神k神编写。</p><ul><li>全书采用动画图解，内容清晰易懂、学习曲线平滑，引导初学者探索数据结构与算法的知识地图。</li><li>源代码可一键运行，帮助读者在练习中提升编程技能，了解算法工作原理和数据结构底层实现。</li><li>鼓励读者互助学习，提问与评论通常可在两日内得到回复。</li></ul><p>前往代码仓 &gt; <a href="https://github.com/krahets/hello-algo">https://github.com/krahets/hello-algo</a></p><p>前往网页版 &gt; <a href="https://www.hello-algo.com/">https://www.hello-algo.com</a></p><p>前往下载 PDF &gt; <a href="https://github.com/krahets/hello-algo/releases">https://github.com/krahets/hello-algo/releases</a></p><h1 id="推荐语"><a href="#推荐语" class="headerlink" title="推荐语"></a>推荐语</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">“一本通俗易懂的数据结构与算法入门书，引导读者手脑并用地学习，强烈推荐算法初学者阅读。”</span><br><span class="line"></span><br><span class="line">—— 邓俊辉，清华大学计算机系教授</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">“如果我当年学数据结构与算法的时候有《Hello 算法》，学起来应该会简单 10 倍！”</span><br><span class="line"></span><br><span class="line">—— 李沐，亚马逊资深首席科学家</span><br></pre></td></tr></table></figure><hr><p>内容摘自：<br><a href="https://github.com/krahets/hello-algo/blob/main/README.md">https://github.com/krahets/hello-algo/blob/main/README.md</a></p><p><a href="https://www.bilibili.com/read/cv26457908/?spm_id_from=333.999.0.0">https://www.bilibili.com/read/cv26457908/?spm_id_from=333.999.0.0</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 资源分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查询助手使用文档</title>
      <link href="/2023/09/09/%E6%9F%A5%E8%AF%A2%E5%8A%A9%E6%89%8B%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/"/>
      <url>/2023/09/09/%E6%9F%A5%E8%AF%A2%E5%8A%A9%E6%89%8B%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<div id="title_style">    <h1>查询助手使用文档📙</h1></div><a class="welcome">欢迎</a><h2 id="目前文档仍在陆续完善中！"><a href="#目前文档仍在陆续完善中！" class="headerlink" title="目前文档仍在陆续完善中！"></a>目前文档仍在陆续完善中！</h2><hr><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><h2 id="查询助手是什么"><a href="#查询助手是什么" class="headerlink" title="查询助手是什么?"></a>查询助手是什么?</h2><p>查询助手（英文名称：QueryHelper）可以让您便捷的查询成绩。QueryHelper使用Fast API开发，由网页端和客户端驱动组成，所有数据运算均在客户端完成,无需将用户的账号密码等个人信息上传云端，大大降低用户个人信息泄露的风险和远程服务器开销。<br>QueryHelper具有无人值守功能，可以在目标服务器超载时实现无人值守等待响应，自动识别验证码，失败自动重试等。<br><a href="/queryhelper" target="_blank" class="page-button">访问主页🖇</a></p><h2 id="问题反馈"><a href="#问题反馈" class="headerlink" title="问题反馈"></a>问题反馈</h2><p>如果在使用过程中发现了什么缺陷，或是有新的需求提议，请先检查一下以前的文档、issue 是否提过。<br>如果疑似 Bug 或是功能提议，请创建一个 issue 用于追踪问题；<br>Github<i class="fab fa-github"></i>：<a href="https://github.com/cnhkbbs/QueryHelper">https://github.com/cnhkbbs/QueryHelper</a></p><h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>开发者Email: <a href="mailto:&#109;&#97;&#x69;&#x6c;&#64;&#x73;&#98;&#x6f;&#120;&#x6d;&#x2e;&#x65;&#x75;&#x2e;&#111;&#114;&#x67;">&#109;&#97;&#x69;&#x6c;&#64;&#x73;&#98;&#x6f;&#120;&#x6d;&#x2e;&#x65;&#x75;&#x2e;&#111;&#114;&#x67;</a></p><hr><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="获取QueryHelper"><a href="#获取QueryHelper" class="headerlink" title="获取QueryHelper"></a>获取QueryHelper</h2><p>QueryHelper由网页端和驱动程序端两部分组成<br>你可以在<a href="https://github.com/cnhkbbs/QueryHelper/releases">GIthub Release</a> 页面获取已经构建打包完成的驱动程序.<br>或是从<a href="https://sboxm.lanzoub.com/b019iflqb">蓝奏云</a> <a href="https://sboxm.lanzoub.com/b019iflqb">https://sboxm.lanzoub.com/b019iflqb</a>  密码:bvvy 下载驱动程序</p><p>如果想要自行从源代码构建，请参阅以下章节：<br><a href="#构建" class="page-button">构建📙</a></p><h2 id="使用QueryHelper"><a href="#使用QueryHelper" class="headerlink" title="使用QueryHelper"></a>使用QueryHelper</h2><h3 id="Step1-运行驱动"><a href="#Step1-运行驱动" class="headerlink" title="Step1 运行驱动"></a>Step1 运行驱动</h3><p><img src="https://cdnjson.com/images/2023/09/13/QQ20230913133350.md.png" alt="运行截图"></p><h3 id="Step2-打开前端网页"><a href="#Step2-打开前端网页" class="headerlink" title="Step2 打开前端网页"></a>Step2 打开前端网页</h3><p>访问前端网页：<br><a href="https://sboxm.link/staticcdn/QueryHelper/" target="_blank" class="page-button">点此访问🖇</a><br><img src="https://cdnjson.com/images/2023/09/13/35711.md.png" alt="网页截图"></p><hr><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><table><thead><tr><th>参数名</th><th>说明</th><th>示例值</th></tr></thead><tbody><tr><td>账号</td><td>学号或教工号</td><td>123456789</td></tr><tr><td>密码</td><td>账号对应的密码</td><td>11223344</td></tr><tr><td>姓名</td><td>中文姓名</td><td>张三</td></tr><tr><td>目标服务器</td><td>教务网址</td><td><a href="http://127.0.0.1/">http://127.0.0.1</a></td></tr><tr><td>安全时间</td><td>执行查询操作每次向目标服务器发送请求的间隔时间，最低为2秒</td><td>5</td></tr><tr><td>单次执行次数</td><td>每次提交任务和自动重试次数，最大为10次</td><td>5</td></tr><tr><td>gnmkdm</td><td>功能模块代码，可从浏览器自行抓包获得</td><td>N121605</td></tr><tr><td>Header</td><td>对的目标服务器请更换请求头</td><td>2</td></tr></tbody></table><hr><h1 id="常见问题-Q-A"><a href="#常见问题-Q-A" class="headerlink" title="常见问题 Q &amp; A"></a>常见问题 Q &amp; A</h1><h2 id="🤔-无法提交任务？打开驱动后仍显示无法连接驱动？"><a href="#🤔-无法提交任务？打开驱动后仍显示无法连接驱动？" class="headerlink" title="🤔 无法提交任务？打开驱动后仍显示无法连接驱动？"></a>🤔 无法提交任务？打开驱动后仍显示无法连接驱动？</h2><p>🌈 请尝试重启驱动或刷新前端网页</p><h2 id="🤔-提交任务后驱动未作出响应、驱动卡住不动？"><a href="#🤔-提交任务后驱动未作出响应、驱动卡住不动？" class="headerlink" title="🤔 提交任务后驱动未作出响应、驱动卡住不动？"></a>🤔 提交任务后驱动未作出响应、驱动卡住不动？</h2><p>🌈 鼠标左键单击选中驱动，然后按下鼠标右键即可</p><h2 id="🤔-如何获取gnmkdm"><a href="#🤔-如何获取gnmkdm" class="headerlink" title="🤔 如何获取gnmkdm?"></a>🤔 如何获取gnmkdm?</h2><p>🌈 手动登录目标教务网址，然后按“F12”打开开发者模式，在开发者模式中选择“网络”或“network”选项，然后点击教务网菜单中的成绩查询，观察开发者选项框中的请求地址便可找到gnmkdm值<br><img src="https://cdnjson.com/images/2023/09/16/81947.png" alt="81947.png"></p><h2 id="🤔-驱动显示未知异常？没有找到想要的回答？"><a href="#🤔-驱动显示未知异常？没有找到想要的回答？" class="headerlink" title="🤔 驱动显示未知异常？没有找到想要的回答？"></a>🤔 驱动显示未知异常？没有找到想要的回答？</h2><p>🌈  疑似 Bug 或是功能提议，请创建一个 issue 用于追踪问题；<br>🌈  Github开源地址：<a href="https://github.com/cnhkbbs/QueryHelper">https://github.com/cnhkbbs/QueryHelper</a><br>🌈  开发者Email: <a href="mailto:&#x6d;&#x61;&#x69;&#x6c;&#64;&#x73;&#98;&#x6f;&#x78;&#x6d;&#x2e;&#x65;&#117;&#46;&#x6f;&#x72;&#x67;">&#x6d;&#x61;&#x69;&#x6c;&#64;&#x73;&#98;&#x6f;&#x78;&#x6d;&#x2e;&#x65;&#117;&#46;&#x6f;&#x72;&#x67;</a></p><hr><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="💡检查驱动连接"><a href="#💡检查驱动连接" class="headerlink" title="💡检查驱动连接"></a>💡检查驱动连接</h2><h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><table><thead><tr><th></th></tr></thead><tbody><tr><td>接口地址：<a href="http://127.0.0.1:2023/">http://127.0.0.1:2023</a></td></tr><tr><td>返回格式：json</td></tr><tr><td>请求方式: post</td></tr><tr><td>请求参数：无</td></tr></tbody></table><h3 id="请求参数说明"><a href="#请求参数说明" class="headerlink" title="请求参数说明"></a>请求参数说明</h3><p>无</p><h2 id="💡提交查询任务"><a href="#💡提交查询任务" class="headerlink" title="💡提交查询任务"></a>💡提交查询任务</h2><h3 id="基本说明-1"><a href="#基本说明-1" class="headerlink" title="基本说明"></a>基本说明</h3><table><thead><tr><th></th></tr></thead><tbody><tr><td>接口地址：<a href="http://127.0.0.1:2023/submit">http://127.0.0.1:2023/submit</a></td></tr><tr><td>返回格式：HTML</td></tr><tr><td>请求方式: post</td></tr><tr><td>请求参数: name,password，chinese_name，server，safe_time，executions，gnmkdm，header</td></tr></tbody></table><h3 id="请求参数说明-1"><a href="#请求参数说明-1" class="headerlink" title="请求参数说明"></a>请求参数说明</h3><table><thead><tr><th>名称</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>string</td><td>必填</td><td>学号或教工号</td></tr><tr><td>password</td><td>string</td><td>必填</td><td>账号对应的密码</td></tr><tr><td>chinese_name</td><td>string</td><td>必填</td><td>中文姓名</td></tr><tr><td>server</td><td>string</td><td>必填</td><td>教务网址</td></tr><tr><td>safe_time</td><td>string</td><td>必填</td><td>执行查询操作每次向目标服务器发送请求的间隔时间，最低为2秒</td></tr><tr><td>executions</td><td>string</td><td>必填</td><td>每次提交任务和自动重试次数，最大为10次</td></tr><tr><td>gnmkdm</td><td>string</td><td>必填</td><td>功能模块代码，可从浏览器自行抓包获得</td></tr><tr><td>header</td><td>string</td><td>必填</td><td>请求头，对于有反爬措施的目标服务器请更换请求头</td></tr></tbody></table><h2 id="💡获取查询结果"><a href="#💡获取查询结果" class="headerlink" title="💡获取查询结果"></a>💡获取查询结果</h2><h3 id="基本说明-2"><a href="#基本说明-2" class="headerlink" title="基本说明"></a>基本说明</h3><table><thead><tr><th></th></tr></thead><tbody><tr><td>接口地址：<a href="http://127.0.0.1:2023/getresult">http://127.0.0.1:2023/getresult</a></td></tr><tr><td>返回格式：HTML</td></tr><tr><td>请求方式: post</td></tr><tr><td>请求参数：无</td></tr></tbody></table><h3 id="请求参数说明-2"><a href="#请求参数说明-2" class="headerlink" title="请求参数说明"></a>请求参数说明</h3><p>无</p><hr><h1 id="开发者模式"><a href="#开发者模式" class="headerlink" title="开发者模式"></a>开发者模式</h1><h2 id="关于开发者模式"><a href="#关于开发者模式" class="headerlink" title="关于开发者模式"></a>关于开发者模式</h2><p>开发者模式可以通过一定的指令，解除驱动对用户提交任务参数的限制，例如安全时间和单次执行次数等，主要用于驱动开发阶段功能测试，除非你明白这意味着什么，否则请不要打开，使用不当或将承担相关责任！</p><h2 id="如何开启"><a href="#如何开启" class="headerlink" title="如何开启"></a>如何开启</h2><p>账号栏输入 dev 并在其它栏随便输入一些字符，提交即可启用开发者模式。</p><hr><h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><p>QueryHelper项目主要由两部分组成：驱动主仓库<a href="https://github.com/cnhkbbs/QueryHelper">QueryHelper</a>,以及前端仓库<a href="https://github.com/cnhkbbs/staticcdn/tree/main/QueryHelper">staticcdn&#x2F;QueryHelper</a></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>Python 3.11</li><li>PyCharm (可选)</li></ul><h2 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h2><h3 id="安装python软件包"><a href="#安装python软件包" class="headerlink" title="安装python软件包"></a>安装python软件包</h3><p>自行安装所有必要的python软件包，无特别版本要求，使用PyCharm自动安装即可</p><h3 id="安装pyinstaller"><a href="#安装pyinstaller" class="headerlink" title="安装pyinstaller"></a>安装pyinstaller</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><h3 id="修改ddddocr-init-py-第466行"><a href="#修改ddddocr-init-py-第466行" class="headerlink" title="修改ddddocr init.py 第466行"></a>修改ddddocr <strong>init</strong>.py 第466行</h3><p>修改前</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image = image.resize((int(image.size[0] * (64 / image.size[1])), 64), Image.ANTIALIAS).convert(&#x27;L&#x27;)</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image = image.resize((int(image.size[0] * (64 / image.size[1])), 64), Image.LANCZOS).convert(&#x27;L&#x27;)</span><br></pre></td></tr></table></figure><h3 id="进行编译"><a href="#进行编译" class="headerlink" title="进行编译"></a>进行编译</h3><p>使用以下指令进行编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F main.py -p 项目软件包绝对地址</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F main.py -p E:\pyProject\QueryHelper\venv\Lib\site-packages</span><br></pre></td></tr></table></figure><h3 id="修改-main-spec"><a href="#修改-main-spec" class="headerlink" title="修改 main.spec"></a>修改 main.spec</h3><p>修改编译生成的 main.spec 文件第11行为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">datas=[(&#x27;./venv/Lib/site-packages/ddddocr/common.onnx&#x27;,&#x27;ddddocr&#x27;),(&#x27;./venv/Lib/site-packages/onnxruntime/capi/onnxruntime_providers_shared.dll&#x27;,&#x27;onnxruntime\\capi&#x27;)],</span><br></pre></td></tr></table></figure><h3 id="使用修改后的配置文件重新编译"><a href="#使用修改后的配置文件重新编译" class="headerlink" title="使用修改后的配置文件重新编译"></a>使用修改后的配置文件重新编译</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller .\main.spec</span><br></pre></td></tr></table></figure><h3 id="编译完成"><a href="#编译完成" class="headerlink" title="编译完成"></a>编译完成</h3><p>编译完成的文件位于项目根目录的dist文件夹下。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><style>    .welcome{        font-size: 50px;        text-decoration: none !important;        color: black !important;    }    #title_style{        margin: 0 auto;        text-align: center;    }    .page-button{        font-size: 20px;        margin: 0 auto;        text-align: center;        display: block;        border: 2px solid #49b1f5;        text-decoration: none !important;        border-radius: 15px !important;        width: auto;    }    .page-button:hover{        background-color: #49b1f5 !important;        color: white !important;        cursor: pointer !important;    }</style>]]></content>
      
      
      
        <tags>
            
            <tag> 文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>樱花飘落效果</title>
      <link href="/2022/07/09/%E6%A8%B1%E8%8A%B1%E9%A3%98%E8%90%BD%E6%95%88%E6%9E%9C/"/>
      <url>/2022/07/09/%E6%A8%B1%E8%8A%B1%E9%A3%98%E8%90%BD%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h1>樱花飘落效果</h1><script src="https://cnhkbbs.github.io/jstools/hexo/sakura.js"></script><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>已在当前页面实时渲染</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://fastly.jsdelivr.net/gh/cnhkbbs/jstools/hexo/sakura.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 经验分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手动清理C盘工具-SpaceSniffer</title>
      <link href="/2022/06/27/%E6%89%8B%E5%8A%A8%E6%B8%85%E7%90%86C%E7%9B%98%E5%B7%A5%E5%85%B7-SpaceSniffer/"/>
      <url>/2022/06/27/%E6%89%8B%E5%8A%A8%E6%B8%85%E7%90%86C%E7%9B%98%E5%B7%A5%E5%85%B7-SpaceSniffer/</url>
      
        <content type="html"><![CDATA[<div style="margin: 0 auto;text-align: center;"><h1>手动清理C盘工具-SpaceSniffer</h1></div><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><style type="text/css">            p{                font-size: 20px;            }            #buttonurl{                display: block;                  margin-top: 14px;                width: 200px;                height: 49px;                  background-color: var(--btn-bg);                  color: white !important;                  text-align: center;                  line-height: 2.4;            }</style><p>SpaceSniffer是Windows上一款以块状树平铺直观展现磁盘空间占用情况的软件，使用简单，功能直击痛点，而且大小仅2.20MB。</p><p>由于是绿色软件，下载解压后无需安装，点击SpaceSniffer.exe即可运行</p><p><a id="buttonurl" target="_blank" rel="noopener" href="http://www.uderzo.it/main_products/space_sniffer/">SpaceSniffer官网</a></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 资源分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个按钮样式</title>
      <link href="/2022/04/24/%E4%B8%80%E4%B8%AA%E6%8C%89%E9%92%AE%E6%A0%B7%E5%BC%8F/"/>
      <url>/2022/04/24/%E4%B8%80%E4%B8%AA%E6%8C%89%E9%92%AE%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<center><h1>一个按钮样式</h1></center><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><img src="https://s3.bmp.ovh/imgs/2022/04/24/8a7410d643639b6d.png"/><h2 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">button &#123;</span><br><span class="line"> text-decoration: none;</span><br><span class="line"> position: absolute;</span><br><span class="line"> border: none;</span><br><span class="line"> font-size: 14px;</span><br><span class="line"> font-family: inherit;</span><br><span class="line"> color: #fff;</span><br><span class="line"> width: 9em;</span><br><span class="line"> height: 3em;</span><br><span class="line"> line-height: 2em;</span><br><span class="line"> text-align: center;</span><br><span class="line"> background: linear-gradient(90deg,#03a9f4,#f441a5,#ffeb3b,#03a9f4);</span><br><span class="line"> background-size: 300%;</span><br><span class="line"> border-radius: 30px;</span><br><span class="line"> z-index: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button:hover &#123;</span><br><span class="line"> animation: ani 8s linear infinite;</span><br><span class="line"> border: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes ani &#123;</span><br><span class="line"> 0% &#123;</span><br><span class="line">  background-position: 0%;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> 100% &#123;</span><br><span class="line">  background-position: 400%;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button:before &#123;</span><br><span class="line"> content: &#x27;&#x27;;</span><br><span class="line"> position: absolute;</span><br><span class="line"> top: -5px;</span><br><span class="line"> left: -5px;</span><br><span class="line"> right: -5px;</span><br><span class="line"> bottom: -5px;</span><br><span class="line"> z-index: -1;</span><br><span class="line"> background: linear-gradient(90deg,#03a9f4,#f441a5,#ffeb3b,#03a9f4);</span><br><span class="line"> background-size: 400%;</span><br><span class="line"> border-radius: 35px;</span><br><span class="line"> transition: 1s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button:hover::before &#123;</span><br><span class="line"> filter: blur(20px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button:active &#123;</span><br><span class="line"> background: linear-gradient(32deg,#03a9f4,#f441a5,#ffeb3b,#03a9f4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 经验分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正方教务爬虫</title>
      <link href="/2022/03/24/%E6%AD%A3%E6%96%B9%E6%95%99%E5%8A%A1%E7%88%AC%E8%99%AB/"/>
      <url>/2022/03/24/%E6%AD%A3%E6%96%B9%E6%95%99%E5%8A%A1%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="正方教务爬虫"><a href="#正方教务爬虫" class="headerlink" title="正方教务爬虫"></a>正方教务爬虫</h1><p>基于selenium的正方教务成绩爬虫</p><h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><hr><p>一个正方教务爬虫，可以自动跳到成绩页面并保存成绩..</p><hr><h3 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h3><p>自动登录✔<br>自动验证码识别填写✔<br>失败自动重试✔<br>自动保存成绩✔</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="step-1-下载"><a href="#step-1-下载" class="headerlink" title="step 1 下载"></a>step 1 下载</h2><p>直接复制或下载本仓库里的spider.py文件到本地</p><h2 id="step-2-安装最新版Chrome浏览器（已有请跳过）"><a href="#step-2-安装最新版Chrome浏览器（已有请跳过）" class="headerlink" title="step 2 安装最新版Chrome浏览器（已有请跳过）"></a>step 2 安装最新版Chrome浏览器（已有请跳过）</h2><p><a href="https://www.google.cn/intl/zh-CN/chrome/">https://www.google.cn/intl/zh-CN/chrome/</a></p><h2 id="step-3-下载对应的驱动"><a href="#step-3-下载对应的驱动" class="headerlink" title="step 3 下载对应的驱动"></a>step 3 下载对应的驱动</h2><p>下载地址  <a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a><br>驱动安装教程 <a href="https://blog.csdn.net/m0_67575344/article/details/126142295">https://blog.csdn.net/m0_67575344/article/details/126142295</a></p><h2 id="step-4-安装所需模块"><a href="#step-4-安装所需模块" class="headerlink" title="step 4 安装所需模块"></a>step 4 安装所需模块</h2><ol><li>ddddocr</li><li>selenium</li></ol><h5 id="命令行安装"><a href="#命令行安装" class="headerlink" title="命令行安装"></a>命令行安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install ddddocr</span><br><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><h5 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h5><p>使用pycharm自动安装</p><h2 id="step-5-运行"><a href="#step-5-运行" class="headerlink" title="step 5 运行"></a>step 5 运行</h2><p>直接在编译器环境运行</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import time</span><br><span class="line">import datetime</span><br><span class="line">import ddddocr</span><br><span class="line">import openpyxl</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.chrome.service import Service as ChromeService</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">from selenium.webdriver import ActionChains</span><br><span class="line"></span><br><span class="line">service = ChromeService(executable_path=r&#x27;C:\Program Files\Google\Chrome\Application\chromedriver.exe&#x27;)  # chrome驱动路径</span><br><span class="line">chrome = webdriver.Chrome(service=service)</span><br><span class="line"></span><br><span class="line"># 配置项</span><br><span class="line"></span><br><span class="line">name = &#x27;123456&#x27;  # 账号</span><br><span class="line">pwd = &#x27;132456l&#x27;  # 密码</span><br><span class="line">safe_time = 3  # 安全间隔时间</span><br><span class="line">servernum = 0  # 选择服务器 填： 0,1,2,3</span><br><span class="line">retry = True  # 失败重试</span><br><span class="line">mode = 1  </span><br><span class="line">servers = [&#x27;http://127.0.0.1/&#x27;, &#x27;http://127.0.0.1/&#x27;, &#x27;http://127.0.0.1/&#x27;, &#x27;http://127.0.0.1/&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def print_INFO(message):</span><br><span class="line">    print(&#x27;[&#x27; + datetime.datetime.now().strftime(&#x27;%H:%M:%S&#x27;) + &#x27;]&#x27; + message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def print_ERROR(error):</span><br><span class="line">    print(&#x27;[&#x27; + datetime.datetime.now().strftime(&#x27;%H:%M:%S&#x27;) + &#x27;]&#x27; + &quot;\033[1;31m&quot; + error + &quot; \033[0m&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def print_Exception(e):</span><br><span class="line">    print(&quot;\033[1;31m异常!\033[0m\n&quot;)</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def recognize():</span><br><span class="line">    if chrome.find_element(By.ID, &#x27;icode&#x27;).screenshot(&#x27;img.png&#x27;):  # 捕获验证码</span><br><span class="line">        # 验证码识别</span><br><span class="line">        with open(&#x27;img.png&#x27;, &#x27;rb&#x27;) as f:</span><br><span class="line">            img = f.read()</span><br><span class="line">        ocr = ddddocr.DdddOcr()</span><br><span class="line">        result = ocr.classification(img)</span><br><span class="line">        print(&#x27;[&#x27; + datetime.datetime.now().strftime(&#x27;%H:%M:%S&#x27;) + &#x27;]&#x27; + &quot;验证码&quot; + result)</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def auto_Login():</span><br><span class="line">    chrome.get(servers[servernum])</span><br><span class="line">    print_INFO(&quot;尝试登录&quot; + str(servernum) + &#x27;号服务器&#x27;)</span><br><span class="line">    if chrome.title == &#x27;ERROR - 出错啦！&#x27;:</span><br><span class="line">        return False</span><br><span class="line">    try:</span><br><span class="line">        chrome.find_element(By.ID, &#x27;txtUserName&#x27;).send_keys(name)</span><br><span class="line">        chrome.find_element(By.ID, &#x27;TextBox2&#x27;).send_keys(pwd)</span><br><span class="line">    except:</span><br><span class="line">        print_Exception(Exception)</span><br><span class="line">        return False</span><br><span class="line">    chrome.find_element(By.ID, &#x27;txtSecretCode&#x27;).send_keys(recognize())</span><br><span class="line">    try:</span><br><span class="line">        chrome.find_element(By.ID, &#x27;Button1&#x27;).click()</span><br><span class="line">    except:</span><br><span class="line">        print_Exception(Exception)</span><br><span class="line">        return False</span><br><span class="line">    if chrome.title == &#x27;ERROR - 出错啦！&#x27; or chrome.title == &#x27;欢迎使用正方教务管理系统！请登录&#x27;:</span><br><span class="line">        print_ERROR(&#x27;跳转失败&#x27;)</span><br><span class="line">        return False</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_score():</span><br><span class="line">    try:</span><br><span class="line">        hovertarget = chrome.find_element(By.XPATH, &#x27;/html/body/div/div[1]/ul/li[5]/a/span&#x27;)</span><br><span class="line">        ActionChains(chrome).move_to_element(hovertarget).perform()</span><br><span class="line">        chrome.find_element(By.XPATH, &#x27;/html/body/div/div[1]/ul/li[5]/ul/li[4]/a&#x27;).click()</span><br><span class="line">    except:</span><br><span class="line">        print_Exception(Exception)</span><br><span class="line">        print_ERROR(&#x27;成绩查询按钮点击失败&#x27;)</span><br><span class="line">        return False</span><br><span class="line">    if chrome.title == &#x27;ERROR - 出错啦！&#x27; or chrome.title == &#x27;欢迎使用正方教务管理系统！请登录&#x27;:</span><br><span class="line">        auto_Login()</span><br><span class="line">        return False</span><br><span class="line">    time.sleep(5)</span><br><span class="line">    try:</span><br><span class="line">        chrome.switch_to.frame(&#x27;zhuti&#x27;)</span><br><span class="line">        chrome.find_element(By.ID, &#x27;btn_zcj&#x27;).click()</span><br><span class="line">        if chrome.title == &#x27;ERROR - 出错啦！&#x27; or chrome.title == &#x27;欢迎使用正方教务管理系统！请登录&#x27;:</span><br><span class="line">            chrome.switch_to.default_content()</span><br><span class="line">            while 1:</span><br><span class="line">                if auto_Login():</span><br><span class="line">                    break</span><br><span class="line">            return False</span><br><span class="line">        # 保存到excel</span><br><span class="line">        work_book = openpyxl.Workbook()</span><br><span class="line">        shell = work_book.worksheets[0]</span><br><span class="line">        trs = chrome.find_elements(By.XPATH, &#x27;/html/body/form/div[2]/div/span/div[1]/table[1]/tbody/tr&#x27;)</span><br><span class="line">        trnum = 1</span><br><span class="line">        for tr in trs:</span><br><span class="line">            tdnum = 1</span><br><span class="line">            while 1:</span><br><span class="line">                tdXPATH = &#x27;/html/body/form/div[2]/div/span/div[1]/table[1]/tbody/tr[&#x27; + str(trnum) + &#x27;]/td[&#x27; + str(tdnum) + &#x27;]&#x27;</span><br><span class="line">                shell.cell(trnum, tdnum, chrome.find_element(By.XPATH, tdXPATH).text)</span><br><span class="line">                tdnum += 1</span><br><span class="line">                if tdnum == 20:</span><br><span class="line">                    break</span><br><span class="line">            trnum += 1</span><br><span class="line">        work_book.save(&#x27;score.xlsx&#x27;)</span><br><span class="line">        chrome.switch_to.default_content()</span><br><span class="line">    except:</span><br><span class="line">        print_Exception(Exception)</span><br><span class="line">        print_ERROR(&#x27;成绩获取错误&#x27;)</span><br><span class="line">        return False</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    if mode == 1:</span><br><span class="line">        print_INFO(&#x27;开始查询成绩&#x27;)</span><br><span class="line">        chrome.maximize_window()</span><br><span class="line">        while 1:</span><br><span class="line">            trytimes = 0</span><br><span class="line">            succeed = False</span><br><span class="line">            while 1:</span><br><span class="line">                trytimes += 1</span><br><span class="line">                if auto_Login():</span><br><span class="line">                    succeed = True</span><br><span class="line">                    print_INFO(&#x27;登录成功&#x27;)</span><br><span class="line">                    break</span><br><span class="line">                else:</span><br><span class="line">                    print_ERROR(&#x27;尝试登录失败&#x27;)</span><br><span class="line">                    if retry:</span><br><span class="line">                        if trytimes &gt; 10 and succeed == False:</span><br><span class="line">                            print(&#x27;\033[0;32m已经为你尝试了&#x27; + str(</span><br><span class="line">                                trytimes) + &#x27;次登录, 全部登录失败。建议更换服务器或检查你的账号密码是否正确。\033[0m&#x27;)</span><br><span class="line">                        time.sleep(safe_time)</span><br><span class="line">                        continue</span><br><span class="line">                    else:</span><br><span class="line">                        break</span><br><span class="line">            time.sleep(1)</span><br><span class="line">            trygetscore = 0</span><br><span class="line">            get_scoreFaile = False</span><br><span class="line">            while 1:</span><br><span class="line">                if trygetscore &gt;= 5:</span><br><span class="line">                    get_scoreFaile = True</span><br><span class="line">                    break</span><br><span class="line">                trygetscore += 1</span><br><span class="line">                status = get_score()</span><br><span class="line">                if status:</span><br><span class="line">                    print_INFO(&#x27;查询成功&#x27;)</span><br><span class="line">                    break</span><br><span class="line">                else:</span><br><span class="line">                    print_ERROR(&#x27;查询失败&#x27;)</span><br><span class="line">                    if retry:</span><br><span class="line">                        time.sleep(safe_time)</span><br><span class="line">                        continue</span><br><span class="line">                    else:</span><br><span class="line">                        break</span><br><span class="line">            if get_scoreFaile is True:</span><br><span class="line">                continue</span><br><span class="line">            else:</span><br><span class="line">                a = input()</span><br><span class="line">    elif mode == 2:</span><br><span class="line">        print_INFO(&#x27;Exit&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>liveserver插件无法打开浏览器问题修复</title>
      <link href="/2022/02/11/liveserver%E6%8F%92%E4%BB%B6%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E6%B5%8F%E8%A7%88%E5%99%A8%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D/"/>
      <url>/2022/02/11/liveserver%E6%8F%92%E4%BB%B6%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E6%B5%8F%E8%A7%88%E5%99%A8%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<center><h1>liveserver插件无法打开浏览器问题修复</h1></center><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>vscode在使用liveserver插件测试网页时无法自动弹出浏览器</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>打开电脑设置，找到“关于”，打开高级系统设置<br><img src="https://ae01.alicdn.com/kf/H561119bb81dc4210a74c9a46c2384114N.png" alt="图片"></p><p>打开环境变量</p><p><img src="https://ae01.alicdn.com/kf/H19803ae34adb4176a9c20d6beb397284l.png" alt="图片"></p><p>找到Path点击编辑</p><p><img src="https://ae01.alicdn.com/kf/H05601bbdb6134fe1bd2e43436162b746b.png" alt="图片"></p><p>新增以下内容并保存</p><p><img src="https://ae01.alicdn.com/kf/He3c7a562ad8b4d4e92fe03eb6e5f9ac9w.png" alt="图片"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">C:\Program Files\Common Files\IntelWirelessCommon</span><br><span class="line"></span><br><span class="line">%SystemRoot%\system32</span><br><span class="line"></span><br><span class="line">%SystemRoot%</span><br><span class="line"></span><br><span class="line">%SystemRoot%\System32\Wbem</span><br><span class="line"></span><br><span class="line">%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\</span><br><span class="line"></span><br><span class="line">%SYSTEMROOT%\System32\OpenSSH\</span><br><span class="line"></span><br><span class="line">C:\Program Files (x86)]Intel\Intel® Processor Graphics</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 经验分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo和Github搭建个人博客</title>
      <link href="/2021/02/08/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/02/08/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<center><h1>利用Hexo和Github搭建个人博客</h1></center><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul><li><p>Windows7~</p></li><li><p>Linux Ubuntu</p></li><li><p>macOS</p></li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h4><p>git官网 <a href="https://git-scm.com/">https://git-scm.com/</a></p><p>Windows 下载地址 <a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p><p>Linux 下载 </p><p><code># apt-get install git</code></p><p>macOS <a href="https://git-scm.com/download/mac">https://git-scm.com/download/mac</a></p><p><img src="https://cdnjson.com/images/2023/03/07/H395a91678e364876acb4d8bf59c463cc6.png" alt="Windows下载截图"></p><p><img src="https://ae01.alicdn.com/kf/Hd8b1072979f04a8fa053e01b7f4d1212w.png" alt="Windows下载截图"></p><h4 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h4><p><strong>正常情况下一直点“NEXT”即可</strong></p><p>或见<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">图文教程</a></p><p><img src="https://ae01.alicdn.com/kf/Heba3fd2746634c1eb2e86c45e2e9a5733.png" alt="Windows安装截图"></p><h4 id="安装NodeJS"><a href="#安装NodeJS" class="headerlink" title="安装NodeJS"></a>安装NodeJS</h4><p>下载地址 <a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p><img src="https://ae01.alicdn.com/kf/Hc6177704d7aa47078317e3e32b5a8897b.png" alt="Windows安装截图"></p><p><img src="https://ae01.alicdn.com/kf/H022852bfc430417aa41833279ade8cf7A.png" alt="Windows安装截图"></p><h4 id="git使用前配置"><a href="#git使用前配置" class="headerlink" title="git使用前配置"></a>git使用前配置</h4><p><strong>git使用提示：由于git的操作类似于Linux系统，所以无法使用Windows的快捷键对命令进行复制粘贴！！需要复制粘贴请使用鼠标右键菜单</strong></p><p>在合适位置新建一个文件夹来存放你的网站文件</p><p><img src="https://ae01.alicdn.com/kf/H73746586dec745189fafcce86ed4314bn.png" alt="Windows安装截图"></p><p>在新建的文件夹里鼠标右键唤出菜单选择</p><p><img src="https://cdnjson.com/images/2023/03/07/H4c060a7497494b9d9e86f4015816d518s.png" alt="Windows安装截图"></p><p>安装npm淘宝镜像</p><p><code>$ npm install -g cnpm --registry=https://registry.npmmirror.com</code></p><p><img src="https://ae01.alicdn.com/kf/H952070e1b43c410088353a8c68ee0e73T.png" alt="运行结果示例"></p><p>升级npm版本</p><p><code>npm install -g npm@8.4.1</code></p><p><img src="https://cdnjson.com/images/2023/03/07/H9850e3e3899548ed953991b8600034d6U.png" alt="运行结果示例"></p><p>绑定GitHub账户</p><p>本地设置用户名和链接远程账户</p><p><code>git config --global user.email&quot;你的Github邮箱&quot;</code></p><p>例如</p><p><code>git config --global user.email&quot;123@123.com&quot;</code></p><p>配置密钥</p><p><code>ssh-keygen -t rsa -C &quot;你的Github邮箱&quot;</code></p><p>按照提示找到生成的密钥文件</p><p><img src="https://cdnjson.com/images/2023/03/07/H8bcb63b8f6d24f61b1f8fd3e2d030ed2u.png" alt="运行结果示例"></p><p>打开id_rsa.pub,复制里面的key。里面的key是一对看不懂的字符数字组合，不用管他，直接复制；回到github网站，进入Account Settings，左边选择SSH Keys，Add SSH Key。然后把复制的数字粘贴进去。</p><p><img src="https://cdnjson.com/images/2023/03/07/H658b277f79c94295a5e54cd999ee95ddg.png" alt="运行结果示例"></p><p><img src="https://cdnjson.com/images/2023/03/07/H5b0d3d6dac3440e98feadbafab7422bep.png" alt="SSH密钥绑定"></p><p><img src="https://cdnjson.com/images/2023/03/07/H9816c6cf706a4c048a8d3db7cac04201T.png" alt="SSH密钥绑定"></p><p><img src="https://ae01.alicdn.com/kf/Hbbdddda96078422391486e06001585d26.png" alt="ssh密钥绑定"></p><p><img src="https://ae01.alicdn.com/kf/H38460b14b3594f64ad3da02154ba7f328.png" alt="ssh密钥绑定"></p><p>验证是否成功，在git bash下输入</p><p><img src="https://ae01.alicdn.com/kf/Hc6d897a201634b45ab3380350310cf692.png" alt="ssh密钥绑定"></p><h4 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h4><p>hexo官网 <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>在刚刚新建的文件夹里点击鼠标右键，选择git bash here</p><p><img src="https://ae01.alicdn.com/kf/Hf3da84a5cf9b42b4ab83f9aef68772b8L.png" alt="hexo安装"></p><p>运行以下命令</p><p><code>$ npm install hexo-cli -g</code></p><p><img src="https://ae01.alicdn.com/kf/Hbaf9bac47da54dedb32fbf4c3319ef44L.png" alt="运行结果"></p><hr><p><strong>至此hexo已经安装完成</strong></p><hr><h4 id="Hexo的使用"><a href="#Hexo的使用" class="headerlink" title="Hexo的使用"></a>Hexo的使用</h4><p>Hexo已经安装完成，但刚刚新建的文件夹里还没有生成任何文件。现在，开始让Hexo在这个文件夹里生成一个网站</p><p><code>$ hexo init</code></p><p><img src="https://ae01.alicdn.com/kf/H1510925f307543f7a74d7c26e5f041bcM.png" alt="运行结果"></p><p>此时，这个文件夹里已经装好了你的网站配置文件</p><p><img src="https://cdnjson.com/images/2023/03/07/H6dc4bc81118f419a98b45d05cd8e616cI.png" alt="运行结果"></p><h4 id="用Hexo生成网页"><a href="#用Hexo生成网页" class="headerlink" title="用Hexo生成网页"></a>用Hexo生成网页</h4><p>执行命令</p><p><code>hexo g</code></p><p><img src="https://cdnjson.com/images/2023/03/07/H6fff6b68020440d7bae499c8c0b966fcg.png" alt="运行结果"></p><h4 id="预览新生成的网站"><a href="#预览新生成的网站" class="headerlink" title="预览新生成的网站"></a>预览新生成的网站</h4><p>执行命令</p><p><code>hexo s</code></p><p><img src="https://cdnjson.com/images/2023/03/07/H62cb908da2334dc589acfe638a27d921H.png" alt="运行结果"></p><p>访问提示的网址，可以看见网站已经成功生成</p><p><img src="https://ae01.alicdn.com/kf/Hc8da3fc4a1b64b69b345420931f745a0k.png" alt="网站截图"></p><hr><p>至此网站已经成功在本地生成，接下来实现将生成的文件上传到Github让所有人都可以看到</p><hr><h4 id="绑定Github静态页面仓库"><a href="#绑定Github静态页面仓库" class="headerlink" title="绑定Github静态页面仓库"></a>绑定Github静态页面仓库</h4><p>进入你的已经打开GitHub pages的仓库，复制仓库地址</p><p><img src="https://cdnjson.com/images/2023/03/07/H6b2f19e9f1254466a2163b22ad5a86ebd.png" alt="123"></p><p>打开刚刚新建的文件夹，找到这个yml文件</p><p><img src="https://ae01.alicdn.com/kf/He9f8f3c98f4b4b3a93e872ac971470ddd.png" alt="yml修改"></p><p>将<strong>104行</strong>之后的修改</p><p>修改前</p><p><img src="https://cdnjson.com/images/2023/03/07/H3efd4fad9e25494282d371eec7a9ed9c7.png" alt="yml修改前"></p><p><strong>修改后</strong></p><p><img src="https://ae01.alicdn.com/kf/Hd8c6982dfb544cef9902bfe2e9080ab2O.png" alt="yml修改后"></p><p>最后保存,至此仓库已经绑定完成。</p><h5 id="将网站同步到github"><a href="#将网站同步到github" class="headerlink" title="将网站同步到github"></a>将网站同步到github</h5><p>在存放网站的文件夹里打开git bash</p><p>运行以下命令</p><p><code>hexo d</code></p><p>等待上传成功，如果上传失败多运行几次上面的命令</p><hr><p>访问 你的github用户名.github.io 即可看到你的网站</p>]]></content>
      
      
      
        <tags>
            
            <tag> 经验分享 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
